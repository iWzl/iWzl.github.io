<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>现代架构下的即时通讯的实现设计</title>
    <url>/2020/07/07/Instant-Messaging-System-Design/</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <div class="hbe-input-container">
  <input type="password" id="hbePass" placeholder="" />
    <label for="hbePass">查看内容,请输入密码</label>
    <div class="bottom-line"></div>
  </div>
  <script id="hbeData" type="hbeData" data-hmacdigest="5b399cb19b2223a7a234e305c6a313ed4db47217871ba7558ad528234b1780d3">217eb0e2694620ddc0df9ef4c08680f4c1766dfda1eefeee30d7772c817297c6ede2a2f38fef357ac637f0af5dc323e2c0223549d265a78d0b73596631fb3f855dd0429b3e4ccf2fa14f75adcd814da530f300a6295116e5b8aa44d3c59964235ea0be00fb8cbfbdda476224f703e012</script>
</div>
<script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>系统实现设计</category>
      </categories>
      <tags>
        <tag>系统实现设计</tag>
        <tag>即时通讯</tag>
      </tags>
  </entry>
  <entry>
    <title>Java Microbenchmark Harness微基准拾遗</title>
    <url>/2020/07/07/Java-Microbenchmark-Harness/</url>
    <content><![CDATA[<blockquote>
<p><strong>If you cannot measure it, you cannot improve it.    –Lord Kelvin</strong></p>
</blockquote>
<p><a href="http://openjdk.java.net/projects/code-tools/jmh/" target="_blank" rel="noopener">Java Microbenchmark Harness</a> 是专门进行代码的微基准测试的一套工具API。 为应用提供了数据支持，是评价和比较方法好坏的基准。一般说JMH，是在 <strong>Method 层面上的 Benchmark</strong>，精度可以精确到微秒级。以下记录JMH下的一些东西，便于之后查找和学习。</p>
<p>Benchmark 作为应用框架，产品的基准画像，存在统一的标准，避免了不同测评对象自说自话的尴尬，应用框架各自使用有利于自身场景的测评方式必然不可取。</p>
<a id="more"></a>

<h2 id="Hello-JHM"><a href="#Hello-JHM" class="headerlink" title="Hello JHM"></a>Hello JHM</h2><h3 id="Maven依赖"><a href="#Maven依赖" class="headerlink" title="Maven依赖"></a>Maven依赖</h3><p>在项目中使用Maven,只需要添加如下依赖：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- JMH--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.openjdk.jmh<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jmh-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;jmh.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.openjdk.jmh<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jmh-generator-annprocess<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;jmh.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="性能测试设计"><a href="#性能测试设计" class="headerlink" title="性能测试设计"></a>性能测试设计</h3><p>测试比较Spring和StringBuilder的完成字符串拼接的性能</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 比较字符串直接相加和StringBuilder的效率</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Leo Wang</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/7/7 16:44</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@BenchmarkMode</span>(Mode.Throughput)</span><br><span class="line"><span class="meta">@Warmup</span>(iterations = <span class="number">1</span>,time = <span class="number">1</span>, timeUnit = TimeUnit.SECONDS)</span><br><span class="line"><span class="meta">@Measurement</span>(iterations = <span class="number">10</span>,time = <span class="number">10</span>,timeUnit = TimeUnit.SECONDS)</span><br><span class="line"><span class="meta">@Threads</span>(<span class="number">8</span>)</span><br><span class="line"><span class="meta">@Fork</span>(<span class="number">2</span>)</span><br><span class="line"><span class="meta">@OutputTimeUnit</span>(TimeUnit.MILLISECONDS)</span><br><span class="line"><span class="meta">@State</span>(Scope.Thread)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringBuilderBenchmark</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Benchmark</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testStringAdd</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String a = <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            a += i;</span><br><span class="line">        &#125;</span><br><span class="line">        print(a);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Benchmark</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testStringBuilderAdd</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            sb.append(i);</span><br><span class="line">        &#125;</span><br><span class="line">        print(sb.toString());</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(String a)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h3 id="性能测试执行"><a href="#性能测试执行" class="headerlink" title="性能测试执行"></a>性能测试执行</h3><p>对于JMH来说，其执行方式主要有两种</p>
<h4 id="直接IDE运行"><a href="#直接IDE运行" class="headerlink" title="直接IDE运行"></a>直接IDE运行</h4><p>对于体量小的测试，可以直接在IDE中完成相关的测试。如上的测试来说，可以直接运行，然后查看相关结果，执行的结果的Main函数如下，创建<em>Options</em>对象，传入需要执行的测试和测试报告的输出地址。直接执行Main方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> RunnerException </span>&#123;</span><br><span class="line">    String userDirPath = System.getProperty(<span class="string">"user.dir"</span>);</span><br><span class="line">    String benchmarkLogPath = String.format(<span class="string">"%s/%s"</span>,userDirPath,<span class="string">"/StringBenchmark.log"</span>);</span><br><span class="line">    Options options = <span class="keyword">new</span> OptionsBuilder()</span><br><span class="line">            .include(StringBuilderBenchmark<span class="class">.<span class="keyword">class</span>.<span class="title">getSimpleName</span>())</span></span><br><span class="line"><span class="class">            .<span class="title">output</span>(<span class="title">benchmarkLogPath</span>)</span></span><br><span class="line"><span class="class">            .<span class="title">build</span>()</span>;</span><br><span class="line">    <span class="keyword">new</span> Runner(options).run();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在使用IDE进行测试时，需要注意不能使用<strong>Dubug</strong>模式启动，否则不能正常完成测试。</p>
<h4 id="打包成Jar-其他机器上执行"><a href="#打包成Jar-其他机器上执行" class="headerlink" title="打包成Jar,其他机器上执行"></a>打包成Jar,其他机器上执行</h4><p>一般对于大型的测试，需要测试时间比较久，线程比较多，就需要去写好了丢到远端的Linux系统环境中里执行， 不然会在本机执行很久并且需要的性能需求可能达不到测试需求。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mvn clean package</span><br><span class="line">java -jar StringBuilderBenchmark.jar</span><br></pre></td></tr></table></figure>

<h3 id="测试结果"><a href="#测试结果" class="headerlink" title="测试结果"></a>测试结果</h3><p>当正常跑完项目测试以后，JHM会在指定的文件夹下输出一下的测试结果</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> JMH version: 1.23</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> VM version: JDK 1.8.0_251, Java HotSpot(TM) 64-Bit Server VM, 25.251-b08</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> VM invoker: /Library/Java/JavaVirtualMachines/jdk1.8.0_251.jdk/Contents/Home/jre/bin/java</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> VM options: -javaagent:/Applications/IntelliJ IDEA.app/Contents/lib/idea_rt.jar=63118:/Applications/IntelliJ IDEA.app/Contents/bin -Dfile.encoding=UTF-8</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Warmup: 1 iterations, 1 s each</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Measurement: 10 iterations, 10 s each</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Timeout: 10 min per iteration</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Threads: 8 threads, will synchronize iterations</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Benchmark mode: Throughput, ops/time</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Benchmark: com.upuphub.lake.skylake.benchmark.StringBuilderBenchmark.testStringAdd</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Run progress: 0.00% complete, ETA 00:06:44</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Fork: 1 of 2</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Warmup Iteration   1: 9014.340 ops/ms</span></span><br><span class="line">Iteration   1: 21302.297 ops/ms</span><br><span class="line">Iteration   2: 21807.763 ops/ms</span><br><span class="line">Iteration   3: 21812.419 ops/ms</span><br><span class="line">Iteration   4: 21840.912 ops/ms</span><br><span class="line">Iteration   5: 21985.020 ops/ms</span><br><span class="line">Iteration   6: 22066.751 ops/ms</span><br><span class="line">Iteration   7: 22006.021 ops/ms</span><br><span class="line">Iteration   8: 19239.509 ops/ms</span><br><span class="line">Iteration   9: 10515.274 ops/ms</span><br><span class="line">Iteration  10: 11758.987 ops/ms</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Run progress: 25.00% complete, ETA 00:05:21</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Fork: 2 of 2</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Warmup Iteration   1: 5273.829 ops/ms</span></span><br><span class="line">Iteration   1: 18880.356 ops/ms</span><br><span class="line">Iteration   2: 22225.847 ops/ms</span><br><span class="line">Iteration   3: 22017.665 ops/ms</span><br><span class="line">Iteration   4: 22036.969 ops/ms</span><br><span class="line">Iteration   5: 22080.422 ops/ms</span><br><span class="line">Iteration   6: 22262.118 ops/ms</span><br><span class="line">Iteration   7: 22153.187 ops/ms</span><br><span class="line">Iteration   8: 22105.884 ops/ms</span><br><span class="line">Iteration   9: 21613.504 ops/ms</span><br><span class="line">Iteration  10: 22029.923 ops/ms</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Result "com.upuphub.lake.skylake.benchmark.StringBuilderBenchmark.testStringAdd":</span><br><span class="line">  20587.041 ±(99.9%) 2921.754 ops/ms [Average]</span><br><span class="line">  (min, avg, max) = (10515.274, 20587.041, 22262.118), stdev = 3364.697</span><br><span class="line">  CI (99.9%): [17665.287, 23508.796] (assumes normal distribution)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> JMH version: 1.23</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> VM version: JDK 1.8.0_251, Java HotSpot(TM) 64-Bit Server VM, 25.251-b08</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> VM invoker: /Library/Java/JavaVirtualMachines/jdk1.8.0_251.jdk/Contents/Home/jre/bin/java</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> VM options: -javaagent:/Applications/IntelliJ IDEA.app/Contents/lib/idea_rt.jar=63118:/Applications/IntelliJ IDEA.app/Contents/bin -Dfile.encoding=UTF-8</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Warmup: 1 iterations, 1 s each</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Measurement: 10 iterations, 10 s each</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Timeout: 10 min per iteration</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Threads: 8 threads, will synchronize iterations</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Benchmark mode: Throughput, ops/time</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Benchmark: com.upuphub.lake.skylake.benchmark.StringBuilderBenchmark.testStringBuilderAdd</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Run progress: 50.00% complete, ETA 00:03:34</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Fork: 1 of 2</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Warmup Iteration   1: 50084.373 ops/ms</span></span><br><span class="line">Iteration   1: 67510.457 ops/ms</span><br><span class="line">Iteration   2: 42202.643 ops/ms</span><br><span class="line">Iteration   3: 41633.858 ops/ms</span><br><span class="line">Iteration   4: 43352.405 ops/ms</span><br><span class="line">Iteration   5: 43748.063 ops/ms</span><br><span class="line">Iteration   6: 45176.476 ops/ms</span><br><span class="line">Iteration   7: 44649.922 ops/ms</span><br><span class="line">Iteration   8: 40872.340 ops/ms</span><br><span class="line">Iteration   9: 40520.724 ops/ms</span><br><span class="line">Iteration  10: 38853.095 ops/ms</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Run progress: 75.00% complete, ETA 00:01:47</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Fork: 2 of 2</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Warmup Iteration   1: 45279.748 ops/ms</span></span><br><span class="line">Iteration   1: 71985.226 ops/ms</span><br><span class="line">Iteration   2: 43291.826 ops/ms</span><br><span class="line">Iteration   3: 44149.181 ops/ms</span><br><span class="line">Iteration   4: 43297.043 ops/ms</span><br><span class="line">Iteration   5: 40614.460 ops/ms</span><br><span class="line">Iteration   6: 40444.594 ops/ms</span><br><span class="line">Iteration   7: 40912.490 ops/ms</span><br><span class="line">Iteration   8: 41428.454 ops/ms</span><br><span class="line">Iteration   9: 43022.557 ops/ms</span><br><span class="line">Iteration  10: 43368.455 ops/ms</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Result "com.upuphub.lake.skylake.benchmark.StringBuilderBenchmark.testStringBuilderAdd":</span><br><span class="line">  45051.713 ±(99.9%) 7496.158 ops/ms [Average]</span><br><span class="line">  (min, avg, max) = (38853.095, 45051.713, 71985.226), stdev = 8632.587</span><br><span class="line">  CI (99.9%): [37555.555, 52547.872] (assumes normal distribution)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Run complete. Total time: 00:07:08</span></span><br><span class="line"></span><br><span class="line">REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on</span><br><span class="line">why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial</span><br><span class="line">experiments, perform baseline and negative tests that provide experimental control, make sure</span><br><span class="line">the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.</span><br><span class="line">Do not assume the numbers tell you what you want them to tell.</span><br><span class="line"></span><br><span class="line">Benchmark                                     Mode  Cnt      Score      Error   Units</span><br><span class="line">StringBuilderBenchmark.testStringAdd         thrpt   20  20587.041 ± 2921.754  ops/ms</span><br><span class="line">StringBuilderBenchmark.testStringBuilderAdd  thrpt   20  45051.713 ± 7496.158  ops/ms</span><br></pre></td></tr></table></figure>

<p>整个测试报告由三个部分组成，首先分别是<strong>testStringAdd</strong>的测试结果然后是<strong>testStringBuilderAdd</strong>的测试结果，最后时两个测试结果之间的结果汇总和对应的比较。前两个部分的结果是类似的，会列出测试环境的一些基本信息，包括JHM的版本、虚拟机版本和相关一些配置等的信息以及测试的一些配置和设置，然后就是预热迭代执行（Warmup Iteration）， 然后是正常的迭代执行（Iteration），最后是结果（Result）的信息输出。一般来说最关注第三部分，也就是汇总结果。</p>
<blockquote>
<p>Tips: 对于汇总结果部分的输出,Error是没有数据的，这里是Score过长挤过去的</p>
</blockquote>
<p>可以看出StringBuilder在做字符串拼接的速度比String的直接评价速度好两倍以上。</p>
<h2 id="JHM的注解和功能"><a href="#JHM的注解和功能" class="headerlink" title="JHM的注解和功能"></a>JHM的注解和功能</h2><h3 id="BenchmarkMode"><a href="#BenchmarkMode" class="headerlink" title="@BenchmarkMode"></a><em>@BenchmarkMode</em></h3><p>基准测试类型。这里选择的是Throughput也就是吞吐量。吞吐量会得到单位时间内可以进行的操作数。</p>
<ul>
<li>Throughput: 整体吞吐量，例如“1秒内可以执行多少次调用”。</li>
<li>AverageTime: 调用的平均时间，例如“每次调用平均耗时xxx毫秒”。</li>
<li>SampleTime: 随机取样，最后输出取样结果的分布，例如“99%的调用在xxx毫秒以内，99.99%的调用在xxx毫秒以内”</li>
<li>SingleShotTime: 以上模式都是默认一次 iteration 是 1s，唯有 SingleShotTime 是只运行一次。往往同时把 warmup 次数设为0，用于测试冷启动时的性能。</li>
<li>All(“all”, “All benchmark modes”): 执行所有模式。</li>
</ul>
<h3 id="Warmup"><a href="#Warmup" class="headerlink" title="@Warmup"></a><em>@Warmup</em></h3><p>在进行基准测试前需要进行预热。一般前几次进行程序测试的时候都会比较慢， 所以要让程序进行几轮预热，保证测试的准确性。其中的参数iterations就是预热轮数。</p>
<blockquote>
<p>Tips: 因为 JVM 的 JIT 机制的存在，如果某个函数被调用多次之后，JVM 会尝试将其编译成为机器码从而提高执行速度。所以为了让 benchmark 的结果更加接近真实情况就需要进行预热</p>
</blockquote>
<h3 id="Measurement"><a href="#Measurement" class="headerlink" title="@Measurement"></a><em>@Measurement</em></h3><p>度量，一些基本的测试参数。</p>
<ol>
<li>iterations 进行测试的轮次</li>
<li>time 每轮进行的时长</li>
<li>timeUnit 时长单位</li>
</ol>
<p>可以根据具体情况调整。一般比较重的东西可以进行大量的测试，放到服务器上运行。</p>
<h3 id="Threads"><a href="#Threads" class="headerlink" title="@Threads"></a><em>@Threads</em></h3><p>每个进程中的测试线程，根据具体情况选择，一般为cpu乘以2。</p>
<h3 id="Fork"><a href="#Fork" class="headerlink" title="@Fork"></a><em>@Fork</em></h3><p>进行 fork 的次数。如果 fork 数是2的话，则 JMH 会 fork 出两个进程来进行测试。</p>
<h3 id="OutputTimeUnit"><a href="#OutputTimeUnit" class="headerlink" title="@OutputTimeUnit"></a><em>@OutputTimeUnit</em></h3><p>基准测试结果的时间类型。一般选择秒、毫秒、微秒。</p>
<h3 id="Benchmark"><a href="#Benchmark" class="headerlink" title="@Benchmark"></a><em>@Benchmark</em></h3><p>方法级注解，表示该方法是需要进行 benchmark ，用法和 JUnit 的 @Test 类似。</p>
<h3 id="Param"><a href="#Param" class="headerlink" title="@Param"></a><em>@Param</em></h3><p>属性级注解，@Param 用来指定某项参数的多种情况。适合用来测试一个函数在不同的参数输入的情况下的性能。</p>
<h3 id="Setup"><a href="#Setup" class="headerlink" title="@Setup"></a><em>@Setup</em></h3><p>方法级注解，需要在测试之前进行一些准备工作，比如对一些数据的初始化。</p>
<h3 id="TearDown"><a href="#TearDown" class="headerlink" title="@TearDown"></a><em>@TearDown</em></h3><p>方法级注解，在测试之后进行一些结束工作，比如关闭线程池，数据库连接等的，主要用于资源的回收等。</p>
<h3 id="State"><a href="#State" class="headerlink" title="@State"></a><em>@State</em></h3><p>当使用@Setup参数的时候，必须在类上加这个参数，不然会提示无法运行。</p>
<p>State 用于声明某个类是一个“状态”，然后接受一个 Scope 参数用来表示该状态的共享范围。 很多 benchmark 会需要一些表示状态的类，JMH 允许你把这些类以依赖注入的方式注入到 benchmark 函数里。Scope 主要分为三种。</p>
<ol>
<li>Thread: 该状态为每个线程独享。</li>
<li>Group: 该状态为同一个组里面所有线程共享。</li>
<li>Benchmark: 该状态在所有线程间共享。</li>
</ol>
<h2 id="补充说明"><a href="#补充说明" class="headerlink" title="补充说明"></a>补充说明</h2><p>大地撒娇</p>
<hr>
<h3 id="参考和来源"><a href="#参考和来源" class="headerlink" title="参考和来源"></a>参考和来源</h3><ul>
<li><a href="https://www.xncoding.com/2018/01/07/java/jmh.html" target="_blank" rel="noopener">Java微基准测试框架JMH</a></li>
<li><a href="http://irfen.me/java-jmh-simple-microbenchmark/" target="_blank" rel="noopener">Java使用JMH进行简单的基准测试Benchmark</a></li>
<li><a href="http://blog.dyngr.com/blog/2016/10/29/introduction-of-jmh/" target="_blank" rel="noopener">Java 并发编程笔记：JMH 性能测试框架</a></li>
<li><a href="http://tutorials.jenkov.com/java-performance/jmh.html" target="_blank" rel="noopener">JMH - Java Microbenchmark Harness</a></li>
</ul>
]]></content>
      <categories>
        <category>系统调优</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>基准测试</tag>
        <tag>系统调优</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS下Nginx支持SSL协议的编译安装</title>
    <url>/2020/07/04/Nginx-under-CentOS-installation/</url>
    <content><![CDATA[<h2 id="Nginx及其衍生的其他相关优秀开源产品"><a href="#Nginx及其衍生的其他相关优秀开源产品" class="headerlink" title="Nginx及其衍生的其他相关优秀开源产品"></a>Nginx及其衍生的其他相关优秀开源产品</h2><ul>
<li><a href="http://nginx.org/" target="_blank" rel="noopener">NGINX</a> 是开源、高性能、高可靠的 Web 和反向代理服务器</li>
<li><a href="https://tengine.taobao.org/" target="_blank" rel="noopener">Tengine</a> Tengine是由淘宝网发起基于Nginx的Web服务器项目</li>
<li><a href="https://openresty.org/cn/" target="_blank" rel="noopener">OpenResty</a> OpenResty® 是一个基于 Nginx 与 Lua 的高性能 Web 平台</li>
</ul>
<h2 id="下载Nginx稳定版包并解压"><a href="#下载Nginx稳定版包并解压" class="headerlink" title="下载Nginx稳定版包并解压"></a>下载Nginx稳定版包并解压</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget http://nginx.org/download/nginx-x.x.x.tar.gz</span><br><span class="line">tar zxvf nginx-x.x.x.tar.gz</span><br><span class="line"><span class="built_in">cd</span> nginx-x.x.x</span><br></pre></td></tr></table></figure>
<a id="more"></a>

<h2 id="补全需要的库依赖"><a href="#补全需要的库依赖" class="headerlink" title="补全需要的库依赖"></a>补全需要的库依赖</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install gcc-c++</span><br><span class="line">yum install -y pcre pcre-devel</span><br><span class="line">yum install -y zlib zlib-devel</span><br><span class="line">yum install -y openssl openssl-devel</span><br></pre></td></tr></table></figure>

<h2 id="执行编译安装"><a href="#执行编译安装" class="headerlink" title="执行编译安装"></a>执行编译安装</h2><p>所有文件放在同一个位置,便于统一管理</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./configure --prefix=/usr/<span class="built_in">local</span>/nginx  \</span><br><span class="line">--conf-path=/usr/<span class="built_in">local</span>/nginx/etc/nginx.conf  \</span><br><span class="line">--user=nginx --group=nginx  \</span><br><span class="line">--error-log-path=/usr/<span class="built_in">local</span>/nginx/nginxlog/error.log  \</span><br><span class="line">--http-log-path=/usr/<span class="built_in">local</span>/nginx/nginxlog/access.log  \</span><br><span class="line">--pid-path=/usr/<span class="built_in">local</span>/nginx/pids/nginx.pid  \</span><br><span class="line">--lock-path=/usr/<span class="built_in">local</span>/nginx/locks/nginx.lock  \</span><br><span class="line">--with-http_ssl_module  \</span><br><span class="line">--with-http_stub_status_module  \</span><br><span class="line">--with-http_gzip_static_module  \</span><br><span class="line">--http-client-body-temp-path=/usr/<span class="built_in">local</span>/nginx/tmp/client  \</span><br><span class="line">--http-proxy-temp-path=/usr/<span class="built_in">local</span>/nginx/tmp/proxy  \</span><br><span class="line">--http-fastcgi-temp-path=/usr/<span class="built_in">local</span>/nginx/tmp/fastcgi  \</span><br><span class="line">--http-uwsgi-temp-path=/usr/<span class="built_in">local</span>/nginx/tmp/uwsgi  \</span><br><span class="line">--http-scgi-temp-path=/usr/<span class="built_in">local</span>/nginx/tmp/scgi</span><br></pre></td></tr></table></figure>
<p>编译结果</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Configuration summary</span><br><span class="line">  + using system PCRE library</span><br><span class="line">  + using system OpenSSL library</span><br><span class="line">  + using system zlib library</span><br><span class="line"></span><br><span class="line">  nginx path prefix: <span class="string">"/usr/local/nginx"</span></span><br><span class="line">  nginx binary file: <span class="string">"/usr/local/nginx/sbin/nginx"</span></span><br><span class="line">  nginx modules path: <span class="string">"/usr/local/nginx/modules"</span></span><br><span class="line">  nginx configuration prefix: <span class="string">"/usr/local/nginx/etc"</span></span><br><span class="line">  nginx configuration file: <span class="string">"/usr/local/nginx/etc/nginx.conf"</span></span><br><span class="line">  nginx pid file: <span class="string">"/usr/local/nginx/pids/nginx.pid"</span></span><br><span class="line">  nginx error <span class="built_in">log</span> file: <span class="string">"/usr/local/nginx/nginxlog/error.log"</span></span><br><span class="line">  nginx http access <span class="built_in">log</span> file: <span class="string">"/usr/local/nginx/nginxlog/access.log"</span></span><br><span class="line">  nginx http client request body temporary files: <span class="string">"/usr/local/nginx/tmp/client"</span></span><br><span class="line">  nginx http proxy temporary files: <span class="string">"/usr/local/nginx/tmp/proxy"</span></span><br><span class="line">  nginx http fastcgi temporary files: <span class="string">"/usr/local/nginx/tmp/fastcgi"</span></span><br><span class="line">  nginx http uwsgi temporary files: <span class="string">"/usr/local/nginx/tmp/uwsgi"</span></span><br><span class="line">  nginx http scgi temporary files: <span class="string">"/usr/local/nginx/tmp/scgi</span></span><br></pre></td></tr></table></figure>
<p>执行安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure>
<h2 id="安装后处理"><a href="#安装后处理" class="headerlink" title="安装后处理"></a>安装后处理</h2><p>查看文件结构</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/nginx/</span><br><span class="line">tree</span><br><span class="line">.</span><br><span class="line">├── etc</span><br><span class="line">│   ├── fastcgi.conf</span><br><span class="line">│   ├── fastcgi.conf.default</span><br><span class="line">│   ├── fastcgi_params</span><br><span class="line">│   ├── fastcgi_params.default</span><br><span class="line">│   ├── koi-utf</span><br><span class="line">│   ├── koi-win</span><br><span class="line">│   ├── mime.types</span><br><span class="line">│   ├── mime.types.default</span><br><span class="line">│   ├── nginx.conf</span><br><span class="line">│   ├── nginx.conf.default</span><br><span class="line">│   ├── scgi_params</span><br><span class="line">│   ├── scgi_params.default</span><br><span class="line">│   ├── uwsgi_params</span><br><span class="line">│   ├── uwsgi_params.default</span><br><span class="line">│   └── win-utf</span><br><span class="line">├── html</span><br><span class="line">│   ├── 50x.html</span><br><span class="line">│   └── index.html</span><br><span class="line">├── nginxlog</span><br><span class="line">├── pids</span><br><span class="line">└── sbin</span><br><span class="line">    └── nginx</span><br></pre></td></tr></table></figure>
<p>完善Nginx目录结构</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkdir -pv /usr/<span class="built_in">local</span>/nginx/tmp/&#123;client,proxy,fastcgi,uwsgi,scgi&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Nginx启动和监听"><a href="#Nginx启动和监听" class="headerlink" title="Nginx启动和监听"></a>Nginx启动和监听</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 启动</span></span><br><span class="line">/usr/<span class="built_in">local</span>/nginx/sbin/nginx</span><br><span class="line"><span class="comment"># 检查是否启动</span></span><br><span class="line">ss -tnlp | grep :80</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Nginx</category>
      </categories>
      <tags>
        <tag>Nginx</tag>
        <tag>Liunx</tag>
        <tag>Server</tag>
        <tag>CentOS</tag>
      </tags>
  </entry>
  <entry>
    <title>关于QuickProfile中存在的风险异常分析</title>
    <url>/2020/07/01/QuickProfile-%20Anomaly-analysis/</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <div class="hbe-input-container">
  <input type="password" id="hbePass" placeholder="" />
    <label for="hbePass">查看内容,请输入密码</label>
    <div class="bottom-line"></div>
  </div>
  <script id="hbeData" type="hbeData" data-hmacdigest="7506cdb68ef40e3b8bde66558b2b1d27508c2bdcba501e880a6f7701d7377a07">5a9d859d84bffc595a5dc39839d0abec3566fd585b6a38a804dc7c35a5153fab63bbb03905a835e023b7afd8d2b9fe225e445421a82b894b11a35036eb237fdc558e756360cc899a68356fe150e4506b3f20fb8738883d1d40c713bdfa4c47a2b2ebcd72306812814541c837058583c4b1c556b2e025b6bcce345f700a94a6bdc4248c757dff85f154ef960af0cb2a828ae782902d669b46ab7fb6883d27c80056eca45c5fabc870ac4a3a0efd08b330053d54c1331647f48352565023c63eb7</script>
</div>
<script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>系统调优</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>系统调优</tag>
      </tags>
  </entry>
</search>
