{"title":"Java Microbenchmark Harness微基准测试基础","uid":"d3c057a0b9d8bdcf70200f0b91e6e914","slug":"历史文档/Java-Microbenchmark-Harness-Basic","date":"2020-07-07T10:24:35.000Z","updated":"2021-06-21T15:20:39.592Z","comments":true,"path":"api/articles/历史文档/Java-Microbenchmark-Harness-Basic.json","keywords":null,"cover":"http://img.upuphub.com/XHreL2.jpg","content":"<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><strong>If you cannot measure it, you cannot improve it.    –Lord Kelvin</strong></p></blockquote>\n<p><a href=\"http://openjdk.java.net/projects/code-tools/jmh/\">Java Microbenchmark Harness</a> 是专门进行代码的微基准测试的一套工具API。 为应用提供了数据支持，是评价和比较方法好坏的基准。一般说JMH，是在 <strong>Method 层面上的 Benchmark</strong>，精度可以精确到微秒级。以下记录JMH的使用和相关基础，便于之后查找和学习。</p>\n<p>Benchmark 作为应用框架，产品的基准画像，存在统一的标准，避免了不同测评对象自说自话的尴尬，应用框架各自使用有利于自身场景的测评方式必然不可取。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"Hello-JHM\"><a href=\"#Hello-JHM\" class=\"headerlink\" title=\"Hello JHM\"></a>Hello JHM</h2><h3 id=\"Maven依赖\"><a href=\"#Maven依赖\" class=\"headerlink\" title=\"Maven依赖\"></a>Maven依赖</h3><p>在项目中使用Maven,只需要添加如下依赖：</p>\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\"><span class=\"token comment\">&lt;!-- JMH--></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.openjdk.jmh<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>jmh-core<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>$&#123;jmh.version&#125;<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.openjdk.jmh<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>jmh-generator-annprocess<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>$&#123;jmh.version&#125;<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>scope</span><span class=\"token punctuation\">></span></span>provided<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>scope</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"性能测试设计\"><a href=\"#性能测试设计\" class=\"headerlink\" title=\"性能测试设计\"></a>性能测试设计</h3><p>测试比较Spring和StringBuilder的完成字符串拼接的性能</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\n * 比较字符串直接相加和StringBuilder的效率\n *\n * @author Leo Wang\n * @version 1.0\n * @date 2020/7/7 16:44\n */</span>\n<span class=\"token annotation punctuation\">@BenchmarkMode</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Mode<span class=\"token punctuation\">.</span>Throughput</span><span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@Warmup</span><span class=\"token punctuation\">(</span>iterations <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>time <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> timeUnit <span class=\"token operator\">=</span> <span class=\"token class-name\">TimeUnit</span><span class=\"token punctuation\">.</span>SECONDS<span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@Measurement</span><span class=\"token punctuation\">(</span>iterations <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span>time <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span>timeUnit <span class=\"token operator\">=</span> <span class=\"token class-name\">TimeUnit</span><span class=\"token punctuation\">.</span>SECONDS<span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@Threads</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@Fork</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@OutputTimeUnit</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TimeUnit</span><span class=\"token punctuation\">.</span>MILLISECONDS<span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@State</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Scope<span class=\"token punctuation\">.</span>Thread</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">StringBuilderBenchmark</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token annotation punctuation\">@Benchmark</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">testStringAdd</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">String</span> a <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            a <span class=\"token operator\">+=</span> i<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token annotation punctuation\">@Benchmark</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">testStringBuilderAdd</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">StringBuilder</span> sb <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            sb<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>sb<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n  \n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> a<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"性能测试执行\"><a href=\"#性能测试执行\" class=\"headerlink\" title=\"性能测试执行\"></a>性能测试执行</h3><p>对于JMH来说，其执行方式主要有两种</p>\n<h4 id=\"直接IDE运行\"><a href=\"#直接IDE运行\" class=\"headerlink\" title=\"直接IDE运行\"></a>直接IDE运行</h4><p>对于体量小的测试，可以直接在IDE中完成相关的测试。如上的测试来说，可以直接运行，然后查看相关结果，执行的结果的Main函数如下，创建<em>Options</em>对象，传入需要执行的测试和测试报告的输出地址。直接执行Main方法</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">RunnerException</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token class-name\">String</span> userDirPath <span class=\"token operator\">=</span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">getProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"user.dir\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">String</span> benchmarkLogPath <span class=\"token operator\">=</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s/%s\"</span><span class=\"token punctuation\">,</span>userDirPath<span class=\"token punctuation\">,</span><span class=\"token string\">\"/StringBenchmark.log\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Options</span> options <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">OptionsBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">include</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">StringBuilderBenchmark</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span><span class=\"token function\">getSimpleName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">output</span><span class=\"token punctuation\">(</span>benchmarkLogPath<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">new</span> <span class=\"token class-name\">Runner</span><span class=\"token punctuation\">(</span>options<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>在使用IDE进行测试时，需要注意不能使用<strong>Dubug</strong>模式启动，否则不能正常完成测试。</p>\n<h4 id=\"打包成Jar-其他机器上执行\"><a href=\"#打包成Jar-其他机器上执行\" class=\"headerlink\" title=\"打包成Jar,其他机器上执行\"></a>打包成Jar,其他机器上执行</h4><p>一般对于大型的测试，需要测试时间比较久，线程比较多，就需要去写好了丢到远端的Linux系统环境中里执行， 不然会在本机执行很久并且需要的性能需求可能达不到测试需求。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">mvn clean package\njava -jar StringBuilderBenchmark.jar<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h3 id=\"测试结果\"><a href=\"#测试结果\" class=\"headerlink\" title=\"测试结果\"></a>测试结果</h3><p>当正常跑完项目测试以后，JHM会在指定的文件夹下输出一下的测试结果</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\"><span class=\"token comment\"># JMH version: 1.23</span>\n<span class=\"token comment\"># VM version: JDK 1.8.0_251, Java HotSpot(TM) 64-Bit Server VM, 25.251-b08</span>\n<span class=\"token comment\"># VM invoker: /Library/Java/JavaVirtualMachines/jdk1.8.0_251.jdk/Contents/Home/jre/bin/java</span>\n<span class=\"token comment\"># VM options: -javaagent:/Applications/IntelliJ IDEA.app/Contents/lib/idea_rt.jar=63118:/Applications/IntelliJ IDEA.app/Contents/bin -Dfile.encoding=UTF-8</span>\n<span class=\"token comment\"># Warmup: 1 iterations, 1 s each</span>\n<span class=\"token comment\"># Measurement: 10 iterations, 10 s each</span>\n<span class=\"token comment\"># Timeout: 10 min per iteration</span>\n<span class=\"token comment\"># Threads: 8 threads, will synchronize iterations</span>\n<span class=\"token comment\"># Benchmark mode: Throughput, ops/time</span>\n<span class=\"token comment\"># Benchmark: com.upuphub.lake.skylake.benchmark.StringBuilderBenchmark.testStringAdd</span>\n\n<span class=\"token comment\"># Run progress: 0.00% complete, ETA 00:06:44</span>\n<span class=\"token comment\"># Fork: 1 of 2</span>\n<span class=\"token comment\"># Warmup Iteration   1: 9014.340 ops/ms</span>\nIteration   <span class=\"token number\">1</span>: <span class=\"token number\">21302.297</span> ops/ms\nIteration   <span class=\"token number\">2</span>: <span class=\"token number\">21807.763</span> ops/ms\nIteration   <span class=\"token number\">3</span>: <span class=\"token number\">21812.419</span> ops/ms\nIteration   <span class=\"token number\">4</span>: <span class=\"token number\">21840.912</span> ops/ms\nIteration   <span class=\"token number\">5</span>: <span class=\"token number\">21985.020</span> ops/ms\nIteration   <span class=\"token number\">6</span>: <span class=\"token number\">22066.751</span> ops/ms\nIteration   <span class=\"token number\">7</span>: <span class=\"token number\">22006.021</span> ops/ms\nIteration   <span class=\"token number\">8</span>: <span class=\"token number\">19239.509</span> ops/ms\nIteration   <span class=\"token number\">9</span>: <span class=\"token number\">10515.274</span> ops/ms\nIteration  <span class=\"token number\">10</span>: <span class=\"token number\">11758.987</span> ops/ms\n\n<span class=\"token comment\"># Run progress: 25.00% complete, ETA 00:05:21</span>\n<span class=\"token comment\"># Fork: 2 of 2</span>\n<span class=\"token comment\"># Warmup Iteration   1: 5273.829 ops/ms</span>\nIteration   <span class=\"token number\">1</span>: <span class=\"token number\">18880.356</span> ops/ms\nIteration   <span class=\"token number\">2</span>: <span class=\"token number\">22225.847</span> ops/ms\nIteration   <span class=\"token number\">3</span>: <span class=\"token number\">22017.665</span> ops/ms\nIteration   <span class=\"token number\">4</span>: <span class=\"token number\">22036.969</span> ops/ms\nIteration   <span class=\"token number\">5</span>: <span class=\"token number\">22080.422</span> ops/ms\nIteration   <span class=\"token number\">6</span>: <span class=\"token number\">22262.118</span> ops/ms\nIteration   <span class=\"token number\">7</span>: <span class=\"token number\">22153.187</span> ops/ms\nIteration   <span class=\"token number\">8</span>: <span class=\"token number\">22105.884</span> ops/ms\nIteration   <span class=\"token number\">9</span>: <span class=\"token number\">21613.504</span> ops/ms\nIteration  <span class=\"token number\">10</span>: <span class=\"token number\">22029.923</span> ops/ms\n\n\nResult <span class=\"token string\">\"com.upuphub.lake.skylake.benchmark.StringBuilderBenchmark.testStringAdd\"</span><span class=\"token builtin class-name\">:</span>\n  <span class=\"token number\">20587.041</span> ±<span class=\"token punctuation\">(</span><span class=\"token number\">99.9</span>%<span class=\"token punctuation\">)</span> <span class=\"token number\">2921.754</span> ops/ms <span class=\"token punctuation\">[</span>Average<span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">(</span>min, avg, max<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">10515.274</span>, <span class=\"token number\">20587.041</span>, <span class=\"token number\">22262.118</span><span class=\"token punctuation\">)</span>, stdev <span class=\"token operator\">=</span> <span class=\"token number\">3364.697</span>\n  CI <span class=\"token punctuation\">(</span><span class=\"token number\">99.9</span>%<span class=\"token punctuation\">)</span>: <span class=\"token punctuation\">[</span><span class=\"token number\">17665.287</span>, <span class=\"token number\">23508.796</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">(</span>assumes normal distribution<span class=\"token punctuation\">)</span>\n\n\n<span class=\"token comment\"># JMH version: 1.23</span>\n<span class=\"token comment\"># VM version: JDK 1.8.0_251, Java HotSpot(TM) 64-Bit Server VM, 25.251-b08</span>\n<span class=\"token comment\"># VM invoker: /Library/Java/JavaVirtualMachines/jdk1.8.0_251.jdk/Contents/Home/jre/bin/java</span>\n<span class=\"token comment\"># VM options: -javaagent:/Applications/IntelliJ IDEA.app/Contents/lib/idea_rt.jar=63118:/Applications/IntelliJ IDEA.app/Contents/bin -Dfile.encoding=UTF-8</span>\n<span class=\"token comment\"># Warmup: 1 iterations, 1 s each</span>\n<span class=\"token comment\"># Measurement: 10 iterations, 10 s each</span>\n<span class=\"token comment\"># Timeout: 10 min per iteration</span>\n<span class=\"token comment\"># Threads: 8 threads, will synchronize iterations</span>\n<span class=\"token comment\"># Benchmark mode: Throughput, ops/time</span>\n<span class=\"token comment\"># Benchmark: com.upuphub.lake.skylake.benchmark.StringBuilderBenchmark.testStringBuilderAdd</span>\n\n<span class=\"token comment\"># Run progress: 50.00% complete, ETA 00:03:34</span>\n<span class=\"token comment\"># Fork: 1 of 2</span>\n<span class=\"token comment\"># Warmup Iteration   1: 50084.373 ops/ms</span>\nIteration   <span class=\"token number\">1</span>: <span class=\"token number\">67510.457</span> ops/ms\nIteration   <span class=\"token number\">2</span>: <span class=\"token number\">42202.643</span> ops/ms\nIteration   <span class=\"token number\">3</span>: <span class=\"token number\">41633.858</span> ops/ms\nIteration   <span class=\"token number\">4</span>: <span class=\"token number\">43352.405</span> ops/ms\nIteration   <span class=\"token number\">5</span>: <span class=\"token number\">43748.063</span> ops/ms\nIteration   <span class=\"token number\">6</span>: <span class=\"token number\">45176.476</span> ops/ms\nIteration   <span class=\"token number\">7</span>: <span class=\"token number\">44649.922</span> ops/ms\nIteration   <span class=\"token number\">8</span>: <span class=\"token number\">40872.340</span> ops/ms\nIteration   <span class=\"token number\">9</span>: <span class=\"token number\">40520.724</span> ops/ms\nIteration  <span class=\"token number\">10</span>: <span class=\"token number\">38853.095</span> ops/ms\n\n<span class=\"token comment\"># Run progress: 75.00% complete, ETA 00:01:47</span>\n<span class=\"token comment\"># Fork: 2 of 2</span>\n<span class=\"token comment\"># Warmup Iteration   1: 45279.748 ops/ms</span>\nIteration   <span class=\"token number\">1</span>: <span class=\"token number\">71985.226</span> ops/ms\nIteration   <span class=\"token number\">2</span>: <span class=\"token number\">43291.826</span> ops/ms\nIteration   <span class=\"token number\">3</span>: <span class=\"token number\">44149.181</span> ops/ms\nIteration   <span class=\"token number\">4</span>: <span class=\"token number\">43297.043</span> ops/ms\nIteration   <span class=\"token number\">5</span>: <span class=\"token number\">40614.460</span> ops/ms\nIteration   <span class=\"token number\">6</span>: <span class=\"token number\">40444.594</span> ops/ms\nIteration   <span class=\"token number\">7</span>: <span class=\"token number\">40912.490</span> ops/ms\nIteration   <span class=\"token number\">8</span>: <span class=\"token number\">41428.454</span> ops/ms\nIteration   <span class=\"token number\">9</span>: <span class=\"token number\">43022.557</span> ops/ms\nIteration  <span class=\"token number\">10</span>: <span class=\"token number\">43368.455</span> ops/ms\n\n\nResult <span class=\"token string\">\"com.upuphub.lake.skylake.benchmark.StringBuilderBenchmark.testStringBuilderAdd\"</span><span class=\"token builtin class-name\">:</span>\n  <span class=\"token number\">45051.713</span> ±<span class=\"token punctuation\">(</span><span class=\"token number\">99.9</span>%<span class=\"token punctuation\">)</span> <span class=\"token number\">7496.158</span> ops/ms <span class=\"token punctuation\">[</span>Average<span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">(</span>min, avg, max<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">38853.095</span>, <span class=\"token number\">45051.713</span>, <span class=\"token number\">71985.226</span><span class=\"token punctuation\">)</span>, stdev <span class=\"token operator\">=</span> <span class=\"token number\">8632.587</span>\n  CI <span class=\"token punctuation\">(</span><span class=\"token number\">99.9</span>%<span class=\"token punctuation\">)</span>: <span class=\"token punctuation\">[</span><span class=\"token number\">37555.555</span>, <span class=\"token number\">52547.872</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">(</span>assumes normal distribution<span class=\"token punctuation\">)</span>\n\n\n<span class=\"token comment\"># Run complete. Total time: 00:07:08</span>\n\nREMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on\nwhy the numbers are the way they are. Use profilers <span class=\"token punctuation\">(</span>see -prof, -lprof<span class=\"token punctuation\">)</span>, design factorial\nexperiments, perform baseline and negative tests that provide experimental control, <span class=\"token function\">make</span> sure\nthe benchmarking environment is safe on JVM/OS/HW level, ask <span class=\"token keyword\">for</span> reviews from the domain experts.\nDo not assume the numbers tell you what you want them to tell.\n\nBenchmark                                     Mode  Cnt      Score      Error   Units\nStringBuilderBenchmark.testStringAdd         thrpt   <span class=\"token number\">20</span>  <span class=\"token number\">20587.041</span> ± <span class=\"token number\">2921.754</span>  ops/ms\nStringBuilderBenchmark.testStringBuilderAdd  thrpt   <span class=\"token number\">20</span>  <span class=\"token number\">45051.713</span> ± <span class=\"token number\">7496.158</span>  ops/ms<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>整个测试报告由三个部分组成，首先分别是<strong>testStringAdd</strong>的测试结果然后是<strong>testStringBuilderAdd</strong>的测试结果，最后时两个测试结果之间的结果汇总和对应的比较。前两个部分的结果是类似的，会列出测试环境的一些基本信息，包括JHM的版本、虚拟机版本和相关一些配置等的信息以及测试的一些配置和设置，然后就是预热迭代执行（Warmup Iteration）， 然后是正常的迭代执行（Iteration），最后是结果（Result）的信息输出。一般来说最关注第三部分，也就是汇总结果。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>Tips: 对于汇总结果部分的输出,Error是没有数据的，这里是Score过长挤过去的</p></blockquote>\n<p>可以看出StringBuilder在做字符串拼接的速度比String的直接评价速度好两倍以上。</p>\n<h2 id=\"JHM的注解和功能\"><a href=\"#JHM的注解和功能\" class=\"headerlink\" title=\"JHM的注解和功能\"></a>JHM的注解和功能</h2><h3 id=\"BenchmarkMode\"><a href=\"#BenchmarkMode\" class=\"headerlink\" title=\"@BenchmarkMode\"></a><em>@BenchmarkMode</em></h3><p>基准测试类型。这里选择的是Throughput也就是吞吐量。吞吐量会得到单位时间内可以进行的操作数。</p>\n<ul>\n<li>Throughput: 整体吞吐量，例如“1秒内可以执行多少次调用”。</li>\n<li>AverageTime: 调用的平均时间，例如“每次调用平均耗时xxx毫秒”。</li>\n<li>SampleTime: 随机取样，最后输出取样结果的分布，例如“99%的调用在xxx毫秒以内，99.99%的调用在xxx毫秒以内”</li>\n<li>SingleShotTime: 以上模式都是默认一次 iteration 是 1s，唯有 SingleShotTime 是只运行一次。往往同时把 warmup 次数设为0，用于测试冷启动时的性能。</li>\n<li>All(“all”, “All benchmark modes”): 执行所有模式。</li>\n</ul>\n<h3 id=\"Warmup\"><a href=\"#Warmup\" class=\"headerlink\" title=\"@Warmup\"></a><em>@Warmup</em></h3><p>在进行基准测试前需要进行预热。一般前几次进行程序测试的时候都会比较慢， 所以要让程序进行几轮预热，保证测试的准确性。其中的参数iterations就是预热轮数。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>Tips: 因为 JVM 的 JIT 机制的存在，如果某个函数被调用多次之后，JVM 会尝试将其编译成为机器码从而提高执行速度。所以为了让 benchmark 的结果更加接近真实情况就需要进行预热</p></blockquote>\n<h3 id=\"Measurement\"><a href=\"#Measurement\" class=\"headerlink\" title=\"@Measurement\"></a><em>@Measurement</em></h3><p>度量，一些基本的测试参数。</p>\n<ol>\n<li>iterations 进行测试的轮次</li>\n<li>time 每轮进行的时长</li>\n<li>timeUnit 时长单位</li>\n</ol>\n<p>可以根据具体情况调整。一般比较重的东西可以进行大量的测试，放到服务器上运行。</p>\n<h3 id=\"Threads\"><a href=\"#Threads\" class=\"headerlink\" title=\"@Threads\"></a><em>@Threads</em></h3><p>每个进程中的测试线程，根据具体情况选择，一般为cpu乘以2。</p>\n<h3 id=\"Fork\"><a href=\"#Fork\" class=\"headerlink\" title=\"@Fork\"></a><em>@Fork</em></h3><p>进行 fork 的次数。如果 fork 数是2的话，则 JMH 会 fork 出两个进程来进行测试。</p>\n<h3 id=\"OutputTimeUnit\"><a href=\"#OutputTimeUnit\" class=\"headerlink\" title=\"@OutputTimeUnit\"></a><em>@OutputTimeUnit</em></h3><p>基准测试结果的时间类型。一般选择秒、毫秒、微秒。</p>\n<h3 id=\"Benchmark\"><a href=\"#Benchmark\" class=\"headerlink\" title=\"@Benchmark\"></a><em>@Benchmark</em></h3><p>方法级注解，表示该方法是需要进行 benchmark ，用法和 JUnit 的 @Test 类似。</p>\n<h3 id=\"Param\"><a href=\"#Param\" class=\"headerlink\" title=\"@Param\"></a><em>@Param</em></h3><p>属性级注解，@Param 用来指定某项参数的多种情况。适合用来测试一个函数在不同的参数输入的情况下的性能。</p>\n<h3 id=\"Setup\"><a href=\"#Setup\" class=\"headerlink\" title=\"@Setup\"></a><em>@Setup</em></h3><p>方法级注解，需要在测试之前进行一些准备工作，比如对一些数据的初始化。</p>\n<h3 id=\"TearDown\"><a href=\"#TearDown\" class=\"headerlink\" title=\"@TearDown\"></a><em>@TearDown</em></h3><p>方法级注解，在测试之后进行一些结束工作，比如关闭线程池，数据库连接等的，主要用于资源的回收等。</p>\n<h3 id=\"State\"><a href=\"#State\" class=\"headerlink\" title=\"@State\"></a><em>@State</em></h3><p>当使用@Setup参数的时候，必须在类上加这个参数，不然会提示无法运行。</p>\n<p>State 用于声明某个类是一个“状态”，然后接受一个 Scope 参数用来表示该状态的共享范围。 很多 benchmark 会需要一些表示状态的类，JMH 允许你把这些类以依赖注入的方式注入到 benchmark 函数里。Scope 主要分为三种。</p>\n<ol>\n<li>Thread: 该状态为每个线程独享。</li>\n<li>Group: 该状态为同一个组里面所有线程共享。</li>\n<li>Benchmark: 该状态在所有线程间共享。</li>\n</ol>\n<h2 id=\"补充说明\"><a href=\"#补充说明\" class=\"headerlink\" title=\"补充说明\"></a>补充说明</h2><p>在日常的工作和学习中，常常会遇到三种类型的问题，JHM对其能很好就觉很处理。</p>\n<ul>\n<li>对方法或库的不同实现方式的性能分析测试和最后的采用取舍</li>\n<li>方法入参对方法的性能影响和限制</li>\n<li>对项目中的热点方法的优化和其优化效果的定性分析。</li>\n</ul>\n<hr>\n<h2 id=\"参考和来源\"><a href=\"#参考和来源\" class=\"headerlink\" title=\"参考和来源\"></a>参考和来源</h2><ul>\n<li><a href=\"https://www.xncoding.com/2018/01/07/java/jmh.html\">Java微基准测试框架JMH</a></li>\n<li><a href=\"http://irfen.me/java-jmh-simple-microbenchmark/\">Java使用JMH进行简单的基准测试Benchmark</a></li>\n<li><a href=\"http://blog.dyngr.com/blog/2016/10/29/introduction-of-jmh/\">Java 并发编程笔记：JMH 性能测试框架</a></li>\n<li><a href=\"http://tutorials.jenkov.com/java-performance/jmh.html\">JMH - Java Microbenchmark Harness</a></li>\n</ul>\n","text":" If you cannot measure it, you cannot improve it. –Lord Kelvin Java Microbenchmark Harness 是专门进行代码的微基准测试的一套工具API。 为应用提供了数据支持，是评价和比较方法好坏的基准。一...","link":"","photos":[],"count_time":{"symbolsCount":"8.5k","symbolsTime":"8 mins."},"categories":[{"name":"系统调优","slug":"系统调优","count":2,"path":"api/categories/系统调优.json"}],"tags":[{"name":"Java","slug":"Java","count":2,"path":"api/tags/Java.json"},{"name":"基准测试","slug":"基准测试","count":2,"path":"api/tags/基准测试.json"},{"name":"JMH","slug":"JMH","count":2,"path":"api/tags/JMH.json"},{"name":"系统调优","slug":"系统调优","count":2,"path":"api/tags/系统调优.json"},{"name":"基础","slug":"基础","count":1,"path":"api/tags/基础.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Hello-JHM\"><span class=\"toc-text\">Hello JHM</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Maven%E4%BE%9D%E8%B5%96\"><span class=\"toc-text\">Maven依赖</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95%E8%AE%BE%E8%AE%A1\"><span class=\"toc-text\">性能测试设计</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95%E6%89%A7%E8%A1%8C\"><span class=\"toc-text\">性能测试执行</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%9B%B4%E6%8E%A5IDE%E8%BF%90%E8%A1%8C\"><span class=\"toc-text\">直接IDE运行</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%89%93%E5%8C%85%E6%88%90Jar-%E5%85%B6%E4%BB%96%E6%9C%BA%E5%99%A8%E4%B8%8A%E6%89%A7%E8%A1%8C\"><span class=\"toc-text\">打包成Jar,其他机器上执行</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%B5%8B%E8%AF%95%E7%BB%93%E6%9E%9C\"><span class=\"toc-text\">测试结果</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#JHM%E7%9A%84%E6%B3%A8%E8%A7%A3%E5%92%8C%E5%8A%9F%E8%83%BD\"><span class=\"toc-text\">JHM的注解和功能</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#BenchmarkMode\"><span class=\"toc-text\">@BenchmarkMode</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Warmup\"><span class=\"toc-text\">@Warmup</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Measurement\"><span class=\"toc-text\">@Measurement</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Threads\"><span class=\"toc-text\">@Threads</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Fork\"><span class=\"toc-text\">@Fork</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#OutputTimeUnit\"><span class=\"toc-text\">@OutputTimeUnit</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Benchmark\"><span class=\"toc-text\">@Benchmark</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Param\"><span class=\"toc-text\">@Param</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Setup\"><span class=\"toc-text\">@Setup</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#TearDown\"><span class=\"toc-text\">@TearDown</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#State\"><span class=\"toc-text\">@State</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%A1%A5%E5%85%85%E8%AF%B4%E6%98%8E\"><span class=\"toc-text\">补充说明</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%8F%82%E8%80%83%E5%92%8C%E6%9D%A5%E6%BA%90\"><span class=\"toc-text\">参考和来源</span></a></li></ol>","author":{"name":"王小妖","slug":"blog-author","avatar":"http://img.upuphub.com/jW5tou.jpg","link":"/","description":"【啾啾】: 小妖养的小猫猫 </br> 【Lily】: 小妖的大哥</br>【小妖】: 搞后端的技术菜鸟 </br></br>做点记录,省的以后忘了","socials":{"github":"https://github.com/iWzl","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Java Microbenchmark Harness微基准测试陷阱","uid":"27e755dac1a34d29a85efca0aec49e82","slug":"历史文档/Java-Microbenchmark-Harness-Test-Trap","date":"2020-07-09T14:15:59.000Z","updated":"2021-06-21T15:21:07.856Z","comments":true,"path":"api/articles/历史文档/Java-Microbenchmark-Harness-Test-Trap.json","keywords":null,"cover":"http://img.upuphub.com/wjBqVY.jpg","text":" 天下之事，闻者不如见者知之为详，见者不如居者知之为尽。——宋-陆游 你要知道梨子的滋味，就要亲口尝一下。——毛泽东 俗话说，没有实践就没有发言权，自己实践才能知之为尽，Benchmark 为应用提供了数据支持，是评价和比较方法好坏的基准，Benchmark 的准确性，多样性便显...","link":"","photos":[],"count_time":{"symbolsCount":"3.3k","symbolsTime":"3 mins."},"categories":[{"name":"系统调优","slug":"系统调优","count":2,"path":"api/categories/系统调优.json"}],"tags":[{"name":"Java","slug":"Java","count":2,"path":"api/tags/Java.json"},{"name":"基准测试","slug":"基准测试","count":2,"path":"api/tags/基准测试.json"},{"name":"JMH","slug":"JMH","count":2,"path":"api/tags/JMH.json"},{"name":"系统调优","slug":"系统调优","count":2,"path":"api/tags/系统调优.json"},{"name":"误区和陷阱","slug":"误区和陷阱","count":1,"path":"api/tags/误区和陷阱.json"}],"author":{"name":"王小妖","slug":"blog-author","avatar":"http://img.upuphub.com/jW5tou.jpg","link":"/","description":"【啾啾】: 小妖养的小猫猫 </br> 【Lily】: 小妖的大哥</br>【小妖】: 搞后端的技术菜鸟 </br></br>做点记录,省的以后忘了","socials":{"github":"https://github.com/iWzl","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{}}