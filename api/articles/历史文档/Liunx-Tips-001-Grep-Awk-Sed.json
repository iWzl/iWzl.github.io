{"title":"Liuns系统高效文件处理三剑客-Grep/Awk/Sed","uid":"2ee77e34c0e7f66f6f5d9526faba3817","slug":"历史文档/Liunx-Tips-001-Grep-Awk-Sed","date":"2020-08-14T03:45:29.000Z","updated":"2021-06-22T04:53:45.210Z","comments":true,"path":"api/articles/历史文档/Liunx-Tips-001-Grep-Awk-Sed.json","keywords":null,"cover":"https://img.upuphub.com/k0jXtK.jpg","content":"<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><strong>子曰：“工欲善其事，必先利其器。居是邦也，事其大夫之贤者，友其士之仁者。”</strong> –论语·卫灵公</p></blockquote>\n<h3 id=\"Grep\"><a href=\"#Grep\" class=\"headerlink\" title=\"Grep\"></a>Grep</h3><p><a href=\"https://zh.wikipedia.org/wiki/Grep\">Grep</a>(global search regular expression(RE) and print out the line)是一款强大的文本搜索工具，支持正则表达式。来自Unix文本编辑器ed类似操作的命令,最初用于Unix操作系统的命令行工具。在给出文件列表或标准输入后，grep会对匹配一个或多个正则表达式的文本进行搜索，并只输出匹配（或者不匹配）的行或文本。</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\"><span class=\"token punctuation\">[</span>root@Leonardo-iWzl-Aliyun-Service ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># grep --help</span>\n用法: <span class=\"token function\">grep</span> <span class=\"token punctuation\">[</span>选项<span class=\"token punctuation\">]</span><span class=\"token punctuation\">..</span>. PATTERN <span class=\"token punctuation\">[</span>FILE<span class=\"token punctuation\">]</span><span class=\"token punctuation\">..</span>.\nSearch <span class=\"token keyword\">for</span> <span class=\"token for-or-select variable\">PATTERN</span> <span class=\"token keyword\">in</span> each FILE.\nExample: <span class=\"token function\">grep</span> -i <span class=\"token string\">'hello world'</span> menu.h main.c<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<span id=\"more\"></span>\n\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">Pattern selection and interpretation:\n  -E, --extended-regexp     PATTERN is an extended regular expression\n  -F, --fixed-strings       PATTERN is a <span class=\"token builtin class-name\">set</span> of newline-separated strings\n  -G, --basic-regexp        PATTERN is a basic regular expression <span class=\"token punctuation\">(</span>default<span class=\"token punctuation\">)</span>\n  -P, --perl-regexp         PATTERN is a Perl regular expression\n  -e, --regexp<span class=\"token operator\">=</span>PATTERN      用 PATTERN 来进行匹配操作\n  -f, --file<span class=\"token operator\">=</span>FILE           从 FILE 中取得 PATTERN\n  -i, --ignore-case         忽略大小写\n  -w, --word-regexp         强制 PATTERN 仅完全匹配字词\n  -x, --line-regexp         强制 PATTERN 仅完全匹配一行\n  -z, --null-data           一个 <span class=\"token number\">0</span> 字节的数据行，但不是空行\n\n杂项:\n  -s, --no-messages         不显示错误信息\n  -v, --invert-match        选中不匹配的行\n  -V, --version             显示版本信息并退出\n      --help                显示此帮助并退出\n\nOutput control:\n  -m, --max-count<span class=\"token operator\">=</span>NUM       stop after NUM selected lines\n  -b, --byte-offset         print the byte offset with output lines\n  -n, --line-number         print line number with output lines\n      --line-buffered       flush output on every line\n  -H, --with-filename       print <span class=\"token function\">file</span> name with output lines\n  -h, --no-filename         suppress the <span class=\"token function\">file</span> name prefix on output\n      --label<span class=\"token operator\">=</span>LABEL         use LABEL as the standard input <span class=\"token function\">file</span> name prefix\n  -o, --only-matching       只显示匹配PATTERN 部分的行\n  -q, --quiet, --silent     不显示所有常规输出\n      --binary-files<span class=\"token operator\">=</span>TYPE   设定二进制文件的TYPE 类型；\n                            TYPE 可以是<span class=\"token variable\"><span class=\"token variable\">`</span>binary', <span class=\"token variable\">`</span></span>text', 或`without-match<span class=\"token string\">'\n  -a, --text                等同于 --binary-files=text\n  -I                        equivalent to --binary-files=without-match\n  -d, --directories=ACTION  how to handle directories;\n                            ACTION is '</span><span class=\"token builtin class-name\">read</span><span class=\"token string\">', '</span>recurse<span class=\"token string\">', or '</span>skip<span class=\"token string\">'\n  -D, --devices=ACTION      how to handle devices, FIFOs and sockets;\n                            ACTION is '</span><span class=\"token builtin class-name\">read</span><span class=\"token string\">' or '</span>skip<span class=\"token string\">'\n  -r, --recursive           like --directories=recurse\n  -R, --dereference-recursive\n                            likewise, but follow all symlinks\n      --include=FILE_PATTERN\n                            search only files that match FILE_PATTERN\n      --exclude=FILE_PATTERN\n                            skip files and directories matching FILE_PATTERN\n      --exclude-from=FILE   skip files matching any file pattern from FILE\n      --exclude-dir=PATTERN directories that match PATTERN will be skipped.\n  -L, --files-without-match print only names of FILEs with no selected lines\n  -l, --files-with-matches  print only names of FILEs with selected lines\n  -c, --count               print only a count of selected lines per FILE\n\n文件控制:\n  -B, --before-context=NUM  打印文本及其前面NUM 行\n  -A, --after-context=NUM   打印文本及其后面NUM 行\n  -C, --context=NUM         打印NUM 行输出文本\n  -NUM                      same as --context=NUM\n      --group-separator=SEP use SEP as a group separator\n      --no-group-separator  use empty string as a group separator\n      --color[=WHEN],\n      --colour[=WHEN]       use markers to highlight the matching strings;\n                            WHEN is '</span>always<span class=\"token string\">', '</span>never<span class=\"token string\">', or '</span>auto'\n  -U, --binary              <span class=\"token keyword\">do</span> not strip CR characters at EOL <span class=\"token punctuation\">(</span>MSDOS/Windows<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>常用参数:</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">-v        取反\n-i        忽略大小写\n-c        符合条件的行数\n-n        输出的同时打印行号\n^*        以*开头         \n*$         以*结尾 \n^$         空行 \n\n-a        不忽略二进制数据\n-A<span class=\"token operator\">&lt;</span>n<span class=\"token operator\">></span>     除了显示匹配的行外，还显示之后的n行\n-b        在符合条件的行之前，显示该行第一个字符的编号<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>Demo文案</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\"><span class=\"token punctuation\">[</span>root@Leonardo-iWzl-Aliyun-Service ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># cat demo.log</span>\nI came<span class=\"token punctuation\">;</span>\nI saw<span class=\"token punctuation\">;</span>\ni conquered.\n\n我来了，我看到了，我征服了.   ——凯撒大帝<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"查找符合条件的行\"><a href=\"#查找符合条件的行\" class=\"headerlink\" title=\"查找符合条件的行\"></a>查找符合条件的行</h4><pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\"><span class=\"token punctuation\">[</span>root@Leonardo-iWzl-Aliyun-Service ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># cat demo.log |grep 'I'</span>\nI came<span class=\"token punctuation\">;</span>\nI saw<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"查找符合条件的行数\"><a href=\"#查找符合条件的行数\" class=\"headerlink\" title=\"查找符合条件的行数\"></a>查找符合条件的行数</h4><pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\"><span class=\"token punctuation\">[</span>root@Leonardo-iWzl-Aliyun-Service ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># cat demo.log |grep 'I' -c</span>\n<span class=\"token number\">2</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h4 id=\"查找不符合条件的行\"><a href=\"#查找不符合条件的行\" class=\"headerlink\" title=\"查找不符合条件的行\"></a>查找不符合条件的行</h4><pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\"><span class=\"token punctuation\">[</span>root@Leonardo-iWzl-Aliyun-Service ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># cat demo.log |grep 'I' -v</span>\ni conquered.\n\n我来了，我看到了，我征服了.   ——凯撒大帝<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"忽略大小写查找\"><a href=\"#忽略大小写查找\" class=\"headerlink\" title=\"忽略大小写查找\"></a>忽略大小写查找</h4><pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\"><span class=\"token punctuation\">[</span>root@Leonardo-iWzl-Aliyun-Service ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># cat demo.log |grep 'I' -i</span>\nI came<span class=\"token punctuation\">;</span>\nI saw<span class=\"token punctuation\">;</span>\ni conquered.<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"查找符合条件的行并输出行号\"><a href=\"#查找符合条件的行并输出行号\" class=\"headerlink\" title=\"查找符合条件的行并输出行号\"></a>查找符合条件的行并输出行号</h4><pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\"><span class=\"token punctuation\">[</span>root@Leonardo-iWzl-Aliyun-Service ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># cat demo.log |grep 'I' -n</span>\n<span class=\"token number\">1</span>:I came<span class=\"token punctuation\">;</span>\n<span class=\"token number\">2</span>:I saw<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"以’-’开头的查询\"><a href=\"#以’-’开头的查询\" class=\"headerlink\" title=\"以’*’开头的查询\"></a>以’*’开头的查询</h4><pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\"><span class=\"token punctuation\">[</span>root@Leonardo-iWzl-Aliyun-Service ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># cat demo.log |grep '^I'</span>\nI came<span class=\"token punctuation\">;</span>\nI saw<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"以’-’结尾的查询\"><a href=\"#以’-’结尾的查询\" class=\"headerlink\" title=\"以’*’结尾的查询\"></a>以’*’结尾的查询</h4><pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\"><span class=\"token punctuation\">[</span>root@Leonardo-iWzl-Aliyun-Service ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># cat demo.log |grep '; $'</span>\nI came<span class=\"token punctuation\">;</span>\nI saw<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<hr>\n<h3 id=\"Awk\"><a href=\"#Awk\" class=\"headerlink\" title=\"Awk\"></a>Awk</h3><p>Awk不仅仅是一个小工具，也可以算得上一种小型的编程语言了，支持if判断分支和while循环语句还有它的内置函数等，是一个要比grep和sed更强大的文本处理工具，但也就意味着要学习的东西更多了。由 Alfred Aho 、Peter Weinberger 和 Brian Kernighan 创始,并以姓氏的首个字母命名.</p>\n<h4 id=\"基本结构和执行\"><a href=\"#基本结构和执行\" class=\"headerlink\" title=\"基本结构和执行\"></a>基本结构和执行</h4><pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\"><span class=\"token function\">awk</span> <span class=\"token string\">'&#123;[pattern] action&#125;'</span> <span class=\"token punctuation\">&#123;</span>filenames<span class=\"token punctuation\">&#125;</span>  \n<span class=\"token function\">awk</span> <span class=\"token string\">'BEGIN&#123; commands &#125; pattern&#123; commands &#125; END&#123; commands &#125;'</span> <span class=\"token punctuation\">&#123;</span>filenames<span class=\"token punctuation\">&#125;</span>  <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>Awk脚本通常由：BEGIN语句块、能够使用模式匹配的通用语句块、END语句块3部分组成，这三个部分是可选的。任意一个部分都可以不出现在脚本中，脚本通常是被单引号或双引号中.</p>\n<ul>\n<li>第一步：执行BEGIN{ commands }语句块中的语句；</li>\n<li>第二步：从文件或标准输入(stdin)读取一行，然后执行pattern{ commands }语句块，它逐行扫描文件，从第一行到最后一行重复这个过程，直到文件全部被读取完毕。</li>\n<li>第三步：当读至输入流末尾时，执行END{ commands }语句块。</li>\n</ul>\n<p>BEGIN语句块在awk开始从输入流中读取行之前被执行，这是一个可选的语句块，比如变量初始化、打印输出表格的表头等语句通常可以写在BEGIN语句块中。</p>\n<p>END语句块在awk从输入流中读取完所有的行之后即被执行，比如打印所有行的分析结果这类信息汇总都是在END语句块中完成，它也是一个可选语句块。</p>\n<p>Pattern语句块中的通用命令是最重要的部分，它也是可选的。如果没有提供pattern语句块，则默认执行{ print }，即打印每一个读取到的行，awk读取的每一行都会执行该语句块。</p>\n<p>action 在{}内指定，一般用来打印，也可以是一个代码段。也就是commands</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\"><span class=\"token punctuation\">[</span>root@Leonardo-iWzl-Server ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># awk --help</span>\nUsage: <span class=\"token function\">awk</span> <span class=\"token punctuation\">[</span>POSIX or GNU style options<span class=\"token punctuation\">]</span> -f progfile <span class=\"token punctuation\">[</span>--<span class=\"token punctuation\">]</span> <span class=\"token function\">file</span> <span class=\"token punctuation\">..</span>.\nUsage: <span class=\"token function\">awk</span> <span class=\"token punctuation\">[</span>POSIX or GNU style options<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>--<span class=\"token punctuation\">]</span> <span class=\"token string\">'program'</span> <span class=\"token function\">file</span> <span class=\"token punctuation\">..</span>.\nPOSIX options:\t\tGNU long options: <span class=\"token punctuation\">(</span>standard<span class=\"token punctuation\">)</span>\n\t-f progfile\t\t--file<span class=\"token operator\">=</span>progfile\n\t-F fs\t\t\t--field-separator<span class=\"token operator\">=</span>fs\n\t-v <span class=\"token assign-left variable\">var</span><span class=\"token operator\">=</span>val\t\t--assign<span class=\"token operator\">=</span>var<span class=\"token operator\">=</span>val\nShort options:\t\tGNU long options: <span class=\"token punctuation\">(</span>extensions<span class=\"token punctuation\">)</span>\n\t-b\t\t\t--characters-as-bytes\n\t-c\t\t\t--traditional\n\t-C\t\t\t--copyright\n\t-d<span class=\"token punctuation\">[</span>file<span class=\"token punctuation\">]</span>\t\t--dump-variables<span class=\"token punctuation\">[</span><span class=\"token operator\">=</span>file<span class=\"token punctuation\">]</span>\n\t-e <span class=\"token string\">'program-text'</span>\t--source<span class=\"token operator\">=</span><span class=\"token string\">'program-text'</span>\n\t-E <span class=\"token function\">file</span>\t\t\t--exec<span class=\"token operator\">=</span>file\n\t-g\t\t\t--gen-pot\n\t-h\t\t\t--help\n\t-L <span class=\"token punctuation\">[</span>fatal<span class=\"token punctuation\">]</span>\t\t--lint<span class=\"token punctuation\">[</span><span class=\"token operator\">=</span>fatal<span class=\"token punctuation\">]</span>\n\t-n\t\t\t--non-decimal-data\n\t-N\t\t\t--use-lc-numeric\n\t-O\t\t\t--optimize\n\t-p<span class=\"token punctuation\">[</span>file<span class=\"token punctuation\">]</span>\t\t--profile<span class=\"token punctuation\">[</span><span class=\"token operator\">=</span>file<span class=\"token punctuation\">]</span>\n\t-P\t\t\t--posix\n\t-r\t\t\t--re-interval\n\t-S\t\t\t--sandbox\n\t-t\t\t\t--lint-old\n\t-V\t\t\t--version<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"内建参数\"><a href=\"#内建参数\" class=\"headerlink\" title=\"内建参数\"></a>内建参数</h4><table>\n<thead>\n<tr>\n<th align=\"left\">变量</th>\n<th align=\"left\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">$n</td>\n<td align=\"left\">当前记录的第n个字段，字段间由FS分隔</td>\n</tr>\n<tr>\n<td align=\"left\">$0</td>\n<td align=\"left\">完整的输入记录</td>\n</tr>\n<tr>\n<td align=\"left\">ARGC</td>\n<td align=\"left\">命令行参数的数目</td>\n</tr>\n<tr>\n<td align=\"left\">ARGIND</td>\n<td align=\"left\">命令行中当前文件的位置(从0开始算)</td>\n</tr>\n<tr>\n<td align=\"left\">ARGV</td>\n<td align=\"left\">包含命令行参数的数组</td>\n</tr>\n<tr>\n<td align=\"left\">CONVFMT</td>\n<td align=\"left\">数字转换格式(默认值为%.6g)ENVIRON环境变量关联数组</td>\n</tr>\n<tr>\n<td align=\"left\">ERRNO</td>\n<td align=\"left\">最后一个系统错误的描述</td>\n</tr>\n<tr>\n<td align=\"left\">FIELDWIDTHS</td>\n<td align=\"left\">字段宽度列表(用空格键分隔)</td>\n</tr>\n<tr>\n<td align=\"left\">FILENAME</td>\n<td align=\"left\">当前文件名</td>\n</tr>\n<tr>\n<td align=\"left\">FNR</td>\n<td align=\"left\">各文件分别计数的行号</td>\n</tr>\n<tr>\n<td align=\"left\">FS</td>\n<td align=\"left\">字段分隔符(默认是任何空格)</td>\n</tr>\n<tr>\n<td align=\"left\">IGNORECASE</td>\n<td align=\"left\">如果为真，则进行忽略大小写的匹配</td>\n</tr>\n<tr>\n<td align=\"left\">NF</td>\n<td align=\"left\">一条记录的字段的数目</td>\n</tr>\n<tr>\n<td align=\"left\">NR</td>\n<td align=\"left\">已经读出的记录数，就是行号，从1开始</td>\n</tr>\n<tr>\n<td align=\"left\">OFMT</td>\n<td align=\"left\">数字的输出格式(默认值是%.6g)</td>\n</tr>\n<tr>\n<td align=\"left\">OFS</td>\n<td align=\"left\">输出记录分隔符（输出换行符），输出时用指定的符号代替换行符</td>\n</tr>\n<tr>\n<td align=\"left\">ORS</td>\n<td align=\"left\">输出记录分隔符(默认值是一个换行符)</td>\n</tr>\n<tr>\n<td align=\"left\">RLENGTH</td>\n<td align=\"left\">由match函数所匹配的字符串的长度</td>\n</tr>\n<tr>\n<td align=\"left\">RS</td>\n<td align=\"left\">记录分隔符(默认是一个换行符)</td>\n</tr>\n<tr>\n<td align=\"left\">RSTART</td>\n<td align=\"left\">由match函数所匹配的字符串的第一个位置</td>\n</tr>\n<tr>\n<td align=\"left\">SUBSEP</td>\n<td align=\"left\">数组下标分隔符(默认值是/034)</td>\n</tr>\n</tbody></table>\n<h4 id=\"运算支持\"><a href=\"#运算支持\" class=\"headerlink\" title=\"运算支持\"></a>运算支持</h4><table>\n<thead>\n<tr>\n<th align=\"left\">运算符</th>\n<th align=\"left\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">= += -= *= /= %= ^= **=</td>\n<td align=\"left\">赋值</td>\n</tr>\n<tr>\n<td align=\"left\">?:</td>\n<td align=\"left\">C条件表达式</td>\n</tr>\n<tr>\n<td align=\"left\">||</td>\n<td align=\"left\">逻辑或</td>\n</tr>\n<tr>\n<td align=\"left\">&amp;&amp;</td>\n<td align=\"left\">逻辑与</td>\n</tr>\n<tr>\n<td align=\"left\">~ 和 !~</td>\n<td align=\"left\">匹配正则表达式和不匹配正则表达式</td>\n</tr>\n<tr>\n<td align=\"left\">&lt; &lt;= &gt; &gt;= != ==</td>\n<td align=\"left\">关系运算符</td>\n</tr>\n<tr>\n<td align=\"left\">空格</td>\n<td align=\"left\">连接</td>\n</tr>\n<tr>\n<td align=\"left\">+ -</td>\n<td align=\"left\">加，减</td>\n</tr>\n<tr>\n<td align=\"left\">* / %</td>\n<td align=\"left\">乘，除与求余</td>\n</tr>\n<tr>\n<td align=\"left\">+ - !</td>\n<td align=\"left\">一元加，减和逻辑非</td>\n</tr>\n<tr>\n<td align=\"left\">^ ***</td>\n<td align=\"left\">求幂</td>\n</tr>\n<tr>\n<td align=\"left\">++ –</td>\n<td align=\"left\">增加或减少，作为前缀或后缀</td>\n</tr>\n<tr>\n<td align=\"left\">$</td>\n<td align=\"left\">字段引用</td>\n</tr>\n<tr>\n<td align=\"left\">in</td>\n<td align=\"left\">数组成员</td>\n</tr>\n</tbody></table>\n<p>Demo文案</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\"><span class=\"token punctuation\">[</span>root@Leonardo-iWzl-Server ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># cat demo.log</span>\n小米 <span class=\"token number\">20</span> 成都 <span class=\"token number\">172</span> <span class=\"token number\">60</span> 女\n小张 <span class=\"token number\">21</span> 杭州 <span class=\"token number\">182</span> <span class=\"token number\">79</span> 男\n小文 <span class=\"token number\">19</span> 长沙 <span class=\"token number\">178</span> <span class=\"token number\">70</span> 男\n小紫 <span class=\"token number\">22</span> 北京 <span class=\"token number\">168</span> <span class=\"token number\">50</span> 女<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"输出指定位置的文档\"><a href=\"#输出指定位置的文档\" class=\"headerlink\" title=\"输出指定位置的文档\"></a>输出指定位置的文档</h4><pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\"><span class=\"token punctuation\">[</span>root@Leonardo-iWzl-Server ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># cat demo.log |awk '&#123;print $1,$3,$5&#125;'</span>\n小米 成都 <span class=\"token number\">60</span>\n小张 杭州 <span class=\"token number\">79</span>\n小文 长沙 <span class=\"token number\">70</span>\n小紫 北京 <span class=\"token number\">50</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"指定分隔符输出文档\"><a href=\"#指定分隔符输出文档\" class=\"headerlink\" title=\"指定分隔符输出文档\"></a>指定分隔符输出文档</h4><pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\"><span class=\"token comment\"># 使用\"1\"分割</span>\n<span class=\"token punctuation\">[</span>root@Leonardo-iWzl-Server ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># cat demo.log |awk -F 1 '&#123;print $1&#125;'</span>\n小米 <span class=\"token number\">20</span> 成都\n小张 <span class=\"token number\">2</span>\n小文\n小紫 <span class=\"token number\">22</span> 北京\n\n<span class=\"token comment\"># 或者使用内建变量</span>\n<span class=\"token punctuation\">[</span>root@Leonardo-iWzl-Server ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># cat demo.log |awk 'BEGIN&#123;FS='1'&#125; &#123;print $1&#125;'</span>\n小米 <span class=\"token number\">20</span> 成都\n小张 <span class=\"token number\">2</span>\n小文\n小紫 <span class=\"token number\">22</span> 北京\n\n<span class=\"token comment\"># 使用多个分隔符.先使用\"1\"分割，然后对分割结果再使用\"0\"分割</span>\n<span class=\"token punctuation\">[</span>root@Leonardo-iWzl-Server ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># cat demo.log |awk -F '[10]' '&#123;print $1&#125;'</span>\n小米 <span class=\"token number\">2</span>\n小张 <span class=\"token number\">2</span>\n小文\n小紫 <span class=\"token number\">22</span> 北京\n\n<span class=\"token comment\"># 或者使用内建变量</span>\n<span class=\"token punctuation\">[</span>root@Leonardo-iWzl-Server ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># cat demo.log |awk 'BEGIN&#123;FS=\"[10]\"&#125; &#123;print $1&#125;'</span>\n小米 <span class=\"token number\">2</span>\n小张 <span class=\"token number\">2</span>\n小文\n小紫 <span class=\"token number\">22</span> 北京<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"设置计算参数并输出文档\"><a href=\"#设置计算参数并输出文档\" class=\"headerlink\" title=\"设置计算参数并输出文档\"></a>设置计算参数并输出文档</h4><pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\"><span class=\"token comment\">#awk -v 设置变量</span>\n<span class=\"token punctuation\">[</span>root@Leonardo-iWzl-Server ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># cat demo.log |awk -v a=100 '&#123;print $1,$2,a-$2&#125;'</span>\n小米 <span class=\"token number\">20</span> <span class=\"token number\">80</span>\n小张 <span class=\"token number\">21</span> <span class=\"token number\">79</span>\n小文 <span class=\"token number\">19</span> <span class=\"token number\">81</span>\n小紫 <span class=\"token number\">22</span> <span class=\"token number\">78</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n","text":" 子曰：“工欲善其事，必先利其器。居是邦也，事其大夫之贤者，友其士之仁者。” –论语·卫灵公 GrepGrep(global search regular expression(RE) and print out the line)是一款强大的文本搜索工具，支持正则表达式。来自U...","link":"","photos":[],"count_time":{"symbolsCount":"7.8k","symbolsTime":"7 mins."},"categories":[{"name":"Tips","slug":"Tips","count":1,"path":"api/categories/Tips.json"}],"tags":[{"name":"Liunx","slug":"Liunx","count":3,"path":"api/tags/Liunx.json"},{"name":"Tools","slug":"Tools","count":1,"path":"api/tags/Tools.json"},{"name":"Shell","slug":"Shell","count":1,"path":"api/tags/Shell.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Grep\"><span class=\"toc-text\">Grep</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%9F%A5%E6%89%BE%E7%AC%A6%E5%90%88%E6%9D%A1%E4%BB%B6%E7%9A%84%E8%A1%8C\"><span class=\"toc-text\">查找符合条件的行</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%9F%A5%E6%89%BE%E7%AC%A6%E5%90%88%E6%9D%A1%E4%BB%B6%E7%9A%84%E8%A1%8C%E6%95%B0\"><span class=\"toc-text\">查找符合条件的行数</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%9F%A5%E6%89%BE%E4%B8%8D%E7%AC%A6%E5%90%88%E6%9D%A1%E4%BB%B6%E7%9A%84%E8%A1%8C\"><span class=\"toc-text\">查找不符合条件的行</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%BF%BD%E7%95%A5%E5%A4%A7%E5%B0%8F%E5%86%99%E6%9F%A5%E6%89%BE\"><span class=\"toc-text\">忽略大小写查找</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%9F%A5%E6%89%BE%E7%AC%A6%E5%90%88%E6%9D%A1%E4%BB%B6%E7%9A%84%E8%A1%8C%E5%B9%B6%E8%BE%93%E5%87%BA%E8%A1%8C%E5%8F%B7\"><span class=\"toc-text\">查找符合条件的行并输出行号</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%BB%A5%E2%80%99-%E2%80%99%E5%BC%80%E5%A4%B4%E7%9A%84%E6%9F%A5%E8%AF%A2\"><span class=\"toc-text\">以’*’开头的查询</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%BB%A5%E2%80%99-%E2%80%99%E7%BB%93%E5%B0%BE%E7%9A%84%E6%9F%A5%E8%AF%A2\"><span class=\"toc-text\">以’*’结尾的查询</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Awk\"><span class=\"toc-text\">Awk</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%9F%BA%E6%9C%AC%E7%BB%93%E6%9E%84%E5%92%8C%E6%89%A7%E8%A1%8C\"><span class=\"toc-text\">基本结构和执行</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%86%85%E5%BB%BA%E5%8F%82%E6%95%B0\"><span class=\"toc-text\">内建参数</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E8%BF%90%E7%AE%97%E6%94%AF%E6%8C%81\"><span class=\"toc-text\">运算支持</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E8%BE%93%E5%87%BA%E6%8C%87%E5%AE%9A%E4%BD%8D%E7%BD%AE%E7%9A%84%E6%96%87%E6%A1%A3\"><span class=\"toc-text\">输出指定位置的文档</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%8C%87%E5%AE%9A%E5%88%86%E9%9A%94%E7%AC%A6%E8%BE%93%E5%87%BA%E6%96%87%E6%A1%A3\"><span class=\"toc-text\">指定分隔符输出文档</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E8%AE%BE%E7%BD%AE%E8%AE%A1%E7%AE%97%E5%8F%82%E6%95%B0%E5%B9%B6%E8%BE%93%E5%87%BA%E6%96%87%E6%A1%A3\"><span class=\"toc-text\">设置计算参数并输出文档</span></a></li></ol></li></ol>","author":{"name":"王小妖","slug":"blog-author","avatar":"http://img.upuphub.com/jW5tou.jpg","link":"/","description":"【啾啾】: 小妖养的小猫猫 </br> 【Lily】: 小妖的大哥</br>【小妖】: 搞后端的技术菜鸟 </br></br>做点记录,省的以后忘了","socials":{"github":"https://github.com/iWzl","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Maven项目管理详细","uid":"6e9936c6f3fa9647d90930ffd9a587a1","slug":"历史文档/Maven-XML-Details","date":"2020-11-13T10:24:35.000Z","updated":"2021-06-22T04:53:52.633Z","comments":true,"path":"api/articles/历史文档/Maven-XML-Details.json","keywords":null,"cover":"https://img.upuphub.com/5cTQRK.jpg","text":"pom.xml 就像 Make 的 MakeFile、Ant 的 build.xml 一样，Maven 项目的核心是 pom.xml。POM( Project Object Model，项目对象模型 ) 定义了项目的基本信息，用于描述项目如何构建，声明项目依赖，等等。 在版本号的...","link":"","photos":[],"count_time":{"symbolsCount":"27k","symbolsTime":"24 mins."},"categories":[{"name":"maven","slug":"maven","count":1,"path":"api/categories/maven.json"}],"tags":[{"name":"maven","slug":"maven","count":1,"path":"api/tags/maven.json"}],"author":{"name":"王小妖","slug":"blog-author","avatar":"http://img.upuphub.com/jW5tou.jpg","link":"/","description":"【啾啾】: 小妖养的小猫猫 </br> 【Lily】: 小妖的大哥</br>【小妖】: 搞后端的技术菜鸟 </br></br>做点记录,省的以后忘了","socials":{"github":"https://github.com/iWzl","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"Jenkins在CentOS系统环境上的搭建和部署","uid":"d416ce8c5d3763a84244c13dd056ecab","slug":"历史文档/Jenkins-programming-environment-setup","date":"2020-07-23T13:32:40.000Z","updated":"2021-06-22T04:53:39.614Z","comments":true,"path":"api/articles/历史文档/Jenkins-programming-environment-setup.json","keywords":null,"cover":"https://img.upuphub.com/txrp15.jpg","text":"Jenkins服务在CentOS系统环境上的搭建和部署 Jenkins 由Java编写的一个开源的、提供友好操作界面的持续集成(CI)工具，起源于Hudson（Hudson是商用的），主要用于持续、自动的构建/测试软件项目、监控外部任务的运行（这个比较抽象，暂且写上，不做解释）。...","link":"","photos":[],"count_time":{"symbolsCount":"5.8k","symbolsTime":"5 mins."},"categories":[{"name":"DevOps","slug":"DevOps","count":1,"path":"api/categories/DevOps.json"}],"tags":[{"name":"Liunx","slug":"Liunx","count":3,"path":"api/tags/Liunx.json"},{"name":"CentOS","slug":"CentOS","count":2,"path":"api/tags/CentOS.json"},{"name":"DevOps","slug":"DevOps","count":1,"path":"api/tags/DevOps.json"},{"name":"Jenkins","slug":"Jenkins","count":1,"path":"api/tags/Jenkins.json"}],"author":{"name":"王小妖","slug":"blog-author","avatar":"http://img.upuphub.com/jW5tou.jpg","link":"/","description":"【啾啾】: 小妖养的小猫猫 </br> 【Lily】: 小妖的大哥</br>【小妖】: 搞后端的技术菜鸟 </br></br>做点记录,省的以后忘了","socials":{"github":"https://github.com/iWzl","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}