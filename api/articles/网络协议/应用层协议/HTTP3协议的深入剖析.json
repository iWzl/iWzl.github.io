{"title":"HTTP3协议的深入剖析","uid":"58cd1de81cc6a83719721cae20d0ce2c","slug":"网络协议/应用层协议/HTTP3协议的深入剖析","date":"2021-03-24T03:55:05.000Z","updated":"2021-06-22T04:57:36.339Z","comments":true,"path":"api/articles/网络协议/应用层协议/HTTP3协议的深入剖析.json","keywords":null,"cover":"https://img.upuphub.com/CH1K51.jpg","content":"<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>原文来自陶辉老师的《深入剖析HTTP3协议》,这里做一些转载和自己的记录,免得忘了</p></blockquote>\n<h1 id=\"HTTP3协议的深入剖析\"><a href=\"#HTTP3协议的深入剖析\" class=\"headerlink\" title=\"HTTP3协议的深入剖析\"></a>HTTP3协议的深入剖析</h1><p>自2017年起HTTP3协议已发布了34个Draft，推出在即，Chrome、Nginx等软件都在跟进实现最新的草案。本文将介绍HTTP3协议规范、应用场景及实现原理。</p>\n<p>2015年HTTP2协议正式推出后，已经有接近一半的互联网站点在使用它：</p>\n<p><img src=\"https://img.upuphub.com/202106/2021032412271216165600321616560032829XkbSZ6.png\" alt=\"图片来自https://w3techs.com/technologies/details/ce-http2\"></p>\n<p>HTTP2协议虽然大幅提升了HTTP/1.1的性能，然而，基于TCP实现的HTTP2遗留下3个问题：</p>\n<ul>\n<li>有序字节流引出的 <strong>队头阻塞</strong><a href=\"https://en.wikipedia.org/wiki/Head-of-line_blocking\">（Head-of-line blocking）</a>，使得HTTP2的多路复用能力大打折扣；</li>\n<li><strong>TCP与TLS叠加了握手时延</strong>，建链时长还有1倍的下降空间；</li>\n<li>基于TCP四元组确定一个连接，这种诞生于有线网络的设计，并不适合移动状态下的无线网络，这意味着<strong>IP地址的频繁变动会导致TCP连接、TLS会话反复握手</strong>，成本高昂。</li>\n</ul>\n<p>HTTP3协议解决了这些问题：</p>\n<ul>\n<li>HTTP3基于UDP协议重新定义了连接，在QUIC层实现了无序、并发字节流的传输，解决了队头阻塞问题（包括基于QPACK解决了动态表的队头阻塞）；</li>\n<li>HTTP3重新定义了TLS协议加密QUIC头部的方式，既提高了网络攻击成本，又降低了建立连接的速度（仅需1个RTT就可以同时完成建链与密钥协商）；</li>\n<li>HTTP3 将Packet、QUIC Frame、HTTP3 Frame分离，实现了连接迁移功能，降低了5G环境下高速移动设备的连接维护成本。</li>\n</ul>\n<h1 id=\"HTTP3协议到底是什么？\"><a href=\"#HTTP3协议到底是什么？\" class=\"headerlink\" title=\"HTTP3协议到底是什么？\"></a>HTTP3协议到底是什么？</h1><p>就像HTTP2协议一样，HTTP3并没有改变HTTP1的语义。那什么是HTTP语义呢？在我看来，它包括以下3个点：</p>\n<ul>\n<li>请求只能由客户端发起，而服务器针对每个请求返回一个响应；</li>\n<li>请求与响应都由Header、Body（可选）组成，其中请求必须含有URL和方法，而响应必须含有响应码；</li>\n<li>Header中各Name对应的含义保持不变。</li>\n</ul>\n<p>HTTP3在保持HTTP1语义不变的情况下，更改了编码格式，这由2个原因所致：</p>\n<p>首先，是为了减少编码长度。下图中HTTP1协议的编码使用了ASCII码，用空格、冒号以及\\r\\n作为分隔符，编码效率很低：</p>\n<p><img src=\"https://img.upuphub.com/202106/2021032412285116165601311616560131825jRwhn2.png\" alt=\"HTTP协议语义\"></p>\n<p>HTTP2与HTTP3采用二进制、静态表、动态表与Huffman算法对HTTP Header编码，不只提供了高压缩率，还加快了发送端编码、接收端解码的速度。</p>\n<p>其次，由于HTTP1协议不支持多路复用，这样高并发只能通过多开一些TCP连接实现。然而，通过TCP实现高并发有3个弊端：</p>\n<ul>\n<li>实现成本高。TCP是由操作系统内核实现的，如果通过多线程实现并发，并发线程数不能太多，否则线程间切换成本会以指数级上升；如果通过异步、非阻塞socket实现并发，开发效率又太低；</li>\n<li>每个TCP连接与TLS会话都叠加了2-3个RTT的建链成本；</li>\n<li>TCP连接有一个防止出现拥塞的慢启动流程，它会对每个TCP连接都产生减速效果。</li>\n</ul>\n<p>因此，HTTP2与HTTP3都在应用层实现了多路复用功能</p>\n<p><img src=\"https://img.upuphub.com/202106/2021032412294816165601881616560188614XVaK0p.png\" alt=\"图片来自：https://blog.cloudflare.com/http3-the-past-present-and-future/\"></p>\n<p>HTTP2协议基于TCP有序字节流实现，因此<strong>应用层的多路复用并不能做到无序地并发，在丢包场景下会出现队头阻塞问题。</strong>如下面的动态图片所示，服务器返回的绿色响应由5个TCP报文组成，而黄色响应由4个TCP报文组成，当第2个黄色报文丢失后，即使客户端接收到完整的5个绿色报文，但TCP层不会允许应用进程的read函数读取到最后5个报文，并发成了一纸空谈：</p>\n<p><img src=\"https://img.upuphub.com/202106/2021032412310516165602651616560265144TQYO1C.gif\" alt=\"阻塞队列\"></p>\n<p>当网络繁忙时，丢包概率会很高，多路复用受到了很大限制。因此， <strong>HTTP3采用UDP作为传输层协议，重新实现了无序连接，并在此基础上通过有序的QUIC Stream提供了多路复用</strong> ，如下图所示：</p>\n<p><img src=\"https://img.upuphub.com/202106/2021032412320016165603201616560320171ONaX6s.png\" alt=\"图片来自：https://blog.cloudflare.com/http3-the-past-present-and-future/\"></p>\n<p>最早这一实验性协议由Google推出，并命名为gQUIC，因此，IETF草案中仍然保留了QUIC概念，用来描述HTTP3协议的传输层和表示层。HTTP3协议规范由以下5个部分组成：</p>\n<ol>\n<li>QUIC层由<a href=\"https://tools.ietf.org/html/draft-ietf-quic-transport-29\">https://tools.ietf.org/html/draft-ietf-quic-transport-29</a> 描述，它定义了连接、报文的可靠传输、有序字节流的实现；</li>\n<li>TLS协议会将QUIC层的部分报文头部暴露在明文中，方便代理服务器进行路由。<a href=\"https://tools.ietf.org/html/draft-ietf-quic-tls-29\">https://tools.ietf.org/html/draft-ietf-quic-tls-29</a> 规范定义了QUIC与TLS的结合方式；</li>\n<li>丢包检测、RTO重传定时器预估等功能由<a href=\"https://tools.ietf.org/html/draft-ietf-quic-recovery-29\">https://tools.ietf.org/html/draft-ietf-quic-recovery-29</a> 定义，目前拥塞控制使用了类似TCP New RENO的算法，未来有可能更换为基于带宽检测的算法（例如BBR）；</li>\n<li>基于以上3个规范，<a href=\"https://tools.ietf.org/html/draft-ietf-quic-http-29\">https://tools.ietf.org/html/draft-ietf-quic-http-29</a> 定义了HTTP语义的实现，包括服务器推送、请求响应的传输等；</li>\n<li>在HTTP2中，由HPACK规范定义HTTP头部的压缩算法。由于HPACK动态表的更新具有时序性，无法满足HTTP3的要求。在HTTP3中，QPACK定义HTTP头部的编码：<a href=\"https://tools.ietf.org/html/draft-ietf-quic-qpack-16\">https://tools.ietf.org/html/draft-ietf-quic-qpack-16</a> 。注意，以上规范的最新草案都到了29，而QPACK相对简单，它目前更新到16。</li>\n</ol>\n<p>自1991年诞生的HTTP/0.9协议已不再使用， <strong>但1996推出的HTTP/1.0、1999年推出的HTTP/1.1、2015年推出的HTTP2协议仍然共存于互联网中（HTTP/1.0在企业内网中还在广为使用，例如Nginx与上游的默认协议还是1.0版本），即将面世的HTTP3协议的加入，将会进一步增加协议适配的复杂度</strong> 。</p>\n<h1 id=\"连接迁移功能的实现\"><a href=\"#连接迁移功能的实现\" class=\"headerlink\" title=\"连接迁移功能的实现\"></a>连接迁移功能的实现</h1><p>对于当下的HTTP1和HTTP2协议，传输请求前需要先完成耗时1个RTT的TCP三次握手、耗时1个RTT的TLS握手（TLS1.3），由于它们分属内核实现的传输层、openssl库实现的表示层，所以难以合并在一起，如下图所示</p>\n<p><img src=\"https://img.upuphub.com/202106/20210324222605161659596516165959656814j0mI0.png\" alt=\"图片来自：https://blog.cloudflare.com/http3-the-past-present-and-future/\"></p>\n<p>在IoT时代，移动设备接入的网络会频繁变动，从而导致设备IP地址改变。<strong>对于通过四元组（源IP、源端口、目的IP、目的端口）定位连接的TCP协议来说，这意味着连接需要断开重连，所以上述2个RTT的建链时延、TCP慢启动都需要重新来过。</strong>而HTTP3的QUIC层实现了连接迁移功能，允许移动设备更换IP地址后，只要仍保有上下文信息（比如连接ID、TLS密钥等），就可以复用原连接。</p>\n<p>在UDP报文头部与HTTP消息之间，共有3层头部，定义连接且实现了Connection Migration主要是在Packet Header中完成的，如下图所示：</p>\n<p><img src=\"https://img.upuphub.com/202106/2021032422272516165960451616596045106y5pyES.png\" alt=\"TLS3\"></p>\n<p>这3层Header实现的功能各不相同：</p>\n<ul>\n<li>Packet Header实现了可靠的连接。当UDP报文丢失后，通过Packet Header中的Packet Number实现报文重传。连接也是通过其中的Connection ID字段定义的；</li>\n<li>QUIC Frame Header在无序的Packet报文中，基于QUIC Stream概念实现了有序的字节流，这允许HTTP消息可以像在TCP连接上一样传输；</li>\n<li>HTTP3 Frame Header定义了HTTP Header、Body的格式，以及服务器推送、QPACK编解码流等功能。</li>\n</ul>\n<p>为了进一步提升网络传输效率，Packet Header又可以细分为两种：</p>\n<ul>\n<li>Long Packet Header用于首次建立连接；</li>\n<li>Short Packet Header用于日常传输数据。</li>\n</ul>\n<p>其中，Long Packet Header的格式如下图所示：</p>\n<p><img src=\"https://img.upuphub.com/202106/202103242229291616596169161659616955077G4JU.png\" alt=\"Long Packet Header\"></p>\n<p>建立连接时，连接是由服务器通过Source Connection ID字段分配的，这样，后续传输时，双方只需要固定住Destination Connection ID，就可以在客户端IP地址、端口变化后，绕过UDP四元组（与TCP四元组相同），实现连接迁移功能。下图是Short Packet Header头部的格式，这里就不再需要传输Source Connection ID字段了：</p>\n<p><img src=\"https://img.upuphub.com/202106/2021032422300816165962081616596208029xctCuv.png\" alt=\"Packet Header\"></p>\n<p>上图中的Packet Number是每个报文独一无二的序号，基于它可以实现丢失报文的精准重发。如果你通过抓包观察Packet Header，会发现Packet Number被TLS层加密保护了，这是为了防范各类网络攻击的一种设计。下图给出了Packet Header中被加密保护的字段：</p>\n<p><img src=\"https://img.upuphub.com/202106/2021032422305016165962501616596250352oIy5eq.png\" alt=\"Long Header\"></p>\n<p>其中，显示为E（Encrypt）的字段表示被TLS加密过。当然，Packet Header只是描述了最基本的连接信息，其上的Stream层、HTTP消息也是被加密保护的：</p>\n<p><img src=\"https://img.hellobyebye.com/doc/2021032422315916165963191616596319830SsAQ5Q.png\" alt=\"Encrypt\"></p>\n<p>现在我们已经对HTTP3协议的格式有了基本的了解，接下来我们通过队头阻塞问题，看看Packet之上的QUIC Frame、HTTP3 Frame帧格式。</p>\n<h1 id=\"Stream多路复用时的队头阻塞问题解决\"><a href=\"#Stream多路复用时的队头阻塞问题解决\" class=\"headerlink\" title=\"Stream多路复用时的队头阻塞问题解决\"></a>Stream多路复用时的队头阻塞问题解决</h1><p>其实，解决队头阻塞的方案，就是允许微观上有序发出的Packet报文，在接收端无序到达后也可以应用于并发请求中。比如上文的动态图中，如果丢失的黄色报文对其后发出的绿色报文不造成影响，队头阻塞问题自然就得到了解决：</p>\n<p><img src=\"https://img.upuphub.com/202106/20210324223300161659638016165963806320YzB88.gif\" alt=\"对头阻塞问题的解决\"></p>\n<p>在Packet Header之上的QUIC Frame Header，定义了有序字节流Stream，而且Stream之间可以实现真正的并发。HTTP3的Stream，借鉴了HTTP2中的部分概念，所以在讨论QUIC Frame Header格式之前，我们先来看看HTTP2中的Stream长成什么样子：</p>\n<p><img src=\"https://img.upuphub.com/202106/202103242234121616596452161659645207962J1BF.png\" alt=\"图片参见：https://developers.google.com/web/fundamentals/performance/http2\"></p>\n<p>每个Stream就像HTTP1中的TCP连接，它保证了承载的HEADERS frame（存放HTTP Header）、DATA frame（存放HTTP Body）是有序到达的，多个Stream之间可以并行传输。在HTTP3中，上图中的HTTP2 frame会被拆解为两层，我们先来看底层的QUIC Frame。</p>\n<p>一个Packet报文中可以存放多个QUIC Frame，当然所有Frame的长度之和不能大于PMTUD（Path Maximum Transmission Unit Discovery，这是大于1200字节的值），你可以把它与IP路由中的MTU概念对照理解：</p>\n<p><img src=\"https://img.upuphub.com/202106/20210324223544161659654416165965441392qhP3u.png\" alt=\"QUIC\"></p>\n<p>每一个Frame都有明确的类型：</p>\n<p><img src=\"https://img.upuphub.com/202106/2021032422361516165965751616596575656IMsgUl.png\" alt=\"Frame类型\"></p>\n<p>前4个字节的Frame Type字段描述的类型不同，接下来的编码也不相同，下表是各类Frame的16进制Type值</p>\n<table>\n<thead>\n<tr>\n<th>Value</th>\n<th>Name</th>\n<th>Value</th>\n<th>Name</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>0x00</td>\n<td>PADDING</td>\n<td>0x02 – 0x03</td>\n<td>ACK</td>\n</tr>\n<tr>\n<td>0x01</td>\n<td>PING</td>\n<td>0x08 – 0x0f</td>\n<td>STREAM</td>\n</tr>\n<tr>\n<td>0x04</td>\n<td>RESET_STREAM</td>\n<td>0x12-0x13</td>\n<td>MAX_STREAMS</td>\n</tr>\n<tr>\n<td>0x05</td>\n<td>STOP_SENDING</td>\n<td>0x16-0x17</td>\n<td>STREAM_BLOCKED</td>\n</tr>\n<tr>\n<td>0x06</td>\n<td>CRYPTO</td>\n<td>0x1c-0x1d</td>\n<td>CONNECTION_CLOSE</td>\n</tr>\n<tr>\n<td>0x07</td>\n<td>NEW_TOKEN</td>\n<td>0x11</td>\n<td>MAX_STREAM_DATA</td>\n</tr>\n<tr>\n<td>0x10</td>\n<td>MAX_DATA</td>\n<td>0x14</td>\n<td>DATA_BLOCKED</td>\n</tr>\n<tr>\n<td>0x15</td>\n<td>STREAM_DATA_BLOCKED</td>\n<td>0x1a</td>\n<td>PATH_CHALLENGE</td>\n</tr>\n<tr>\n<td>0x18</td>\n<td>NEW_CONNECTION_ID</td>\n<td>0x1b</td>\n<td>PATH_RESPONSE</td>\n</tr>\n<tr>\n<td>0x19</td>\n<td>RETRY_CONNECTION_ID</td>\n<td>0x1e</td>\n<td>HANDSHAKE_DONE</td>\n</tr>\n</tbody></table>\n<p>在上表中，我们只要分析0x08-0x0f这8种STREAM类型的Frame，就能弄明白Stream流的实现原理，自然也就清楚队头阻塞是怎样解决的了。Stream Frame用于传递HTTP消息，它的格式如下所示：</p>\n<p><img src=\"https://img.upuphub.com/202106/2021032422372516165966451616596645524GRsGBI.png\" alt=\"Stream Frame\"></p>\n<p>可见，Stream Frame头部的3个字段，完成了多路复用、有序字节流以及报文段层面的二进制分隔功能，包括：</p>\n<ul>\n<li>Stream ID标识了一个有序字节流。当HTTP Body非常大，需要跨越多个Packet时，只要在每个Stream Frame中含有同样的Stream ID，就可以传输任意长度的消息。多个并发传输的HTTP消息，通过不同的Stream ID加以区别；</li>\n<li>消息序列化后的“有序”特性，是通过Offset字段完成的，它类似于TCP协议中的Sequence序号，用于实现Stream内多个Frame间的累计确认功能；</li>\n<li>Length指明了Frame数据的长度。</li>\n</ul>\n<p>你可能会奇怪，为什么会有8种Stream Frame呢？这是因为0x08-0x0f 这8种类型其实是由3个二进制位组成，它们实现了以下3 标志位的组合：</p>\n<ul>\n<li>第1位表示是否含有Offset，当它为0时，表示这是Stream中的起始Frame，这也是上图中Offset是可选字段的原因；</li>\n<li>第2位表示是否含有Length字段；</li>\n<li>第3位Fin，表示这是Stream中最后1个Frame，与HTTP2协议Frame帧中的FIN标志位相同。</li>\n</ul>\n<p>Stream数据中并不会直接存放HTTP消息，因为HTTP3还需要实现服务器推送、权重优先级设定、流量控制等功能，所以Stream Data中首先存放了HTTP3 Frame：</p>\n<p><img src=\"https://img.upuphub.com/202106/2021032422382516165967051616596705333bEOMci.png\" alt=\"Stream\"></p>\n<p>其中，Length指明了HTTP消息的长度，而Type字段（请注意，低2位有特殊用途，在QPACK章节中会详细介绍）包含了以下类型：</p>\n<ul>\n<li>0x00：DATA帧，用于传输HTTP Body包体；</li>\n<li>0x01：HEADERS帧，通过QPACK 编码，传输HTTP Header头部；</li>\n<li>0x03：CANCEL_PUSH控制帧，用于取消1次服务器推送消息，通常客户端在收到PUSH_PROMISE帧后，通过它告知服务器不需要这次推送；</li>\n<li>0x04：SETTINGS控制帧，设置各类通讯参数；</li>\n<li>0x05：PUSH_PROMISE帧，用于服务器推送HTTP Body前，先将HTTP Header头部发给客户端，流程与HTTP2相似；</li>\n<li>0x07：GOAWAY控制帧，用于关闭连接（注意，不是关闭Stream）；</li>\n<li>0x0d：MAX_PUSH_ID，客户端用来限制服务器推送消息数量的控制帧。</li>\n</ul>\n<p>总结一下，QUIC Stream Frame定义了有序字节流，且多个Stream间的传输没有时序性要求，这样，HTTP消息基于QUIC Stream就实现了真正的多路复用，队头阻塞问题自然就被解决掉了。</p>\n<h1 id=\"QPACK编码对对头阻塞队列问题的解决\"><a href=\"#QPACK编码对对头阻塞队列问题的解决\" class=\"headerlink\" title=\"QPACK编码对对头阻塞队列问题的解决\"></a>QPACK编码对对头阻塞队列问题的解决</h1><p>最后，我们再看下HTTP Header头部的编码方式，它需要面对另一种队头阻塞问题。</p>\n<p>与HTTP2中的HPACK编码方式相似，HTTP3中的QPACK也采用了静态表、动态表及Huffman编码：</p>\n<p><img src=\"https://img.upuphub.com/202106/20210324223945161659678516165967851090LcLMr.png\" alt=\"图片参见：https://www.oreilly.com/content/http2-a-new-excerpt/\"></p>\n<p>先来看静态表的变化。在上图中，GET方法映射为数字2，这是通过客户端、服务器协议实现层的硬编码完成的。在HTTP2中，共有61个静态表项：</p>\n<p><img src=\"https://img.upuphub.com/202106/2021032422402616165968261616596826684CQVW2x.png\" alt=\"静态表\"></p>\n<p>而在QPACK中，则上升为98个静态表项，比如Nginx上的ngx_htt_v3_static_table数组所示</p>\n<p><img src=\"https://img.upuphub.com/202106/2021032422405716165968571616596857872vo5BpS.png\" alt=\"QPACK\"></p>\n<p>你也可以从这里找到完整的HTTP3静态表。对于Huffman以及整数的编码，QPACK与HPACK并无多大不同，但动态表编解码方式差距很大。</p>\n<p>所谓动态表，就是将未包含在静态表中的Header项，在其首次出现时加入动态表，这样后续传输时仅用1个数字表示，大大提升了编码效率。因此，动态表是天然具备时序性的，如果首次出现的请求出现了丢包，后续请求解码HPACK头部时，一定会被阻塞！</p>\n<p>QPACK是如何解决队头阻塞问题的呢？事实上，QPACK将动态表的编码、解码独立在单向Stream中传输，仅当单向Stream中的动态表编码成功后，接收端才能解码双向Stream上HTTP消息里的动态表索引。</p>\n<p>我们又引入了单向Stream和双向Stream概念，不要头疼，它其实很简单。单向指只有一端可以发送消息，双向则指两端都可以发送消息。还记得上一小节的QUIC Stream Frame头部吗？其中的Stream ID别有玄机，除了标识Stream外，它的低2位还可以表达以下组合：</p>\n<p><img src=\"https://img.upuphub.com/202106/2021032422412616165968861616596886163iOEunh.png\" alt=\"Stream Type\"></p>\n<p>因此，当Stream ID是0、4、8、12时，这就是客户端发起的双向Stream（HTTP3不支持服务器发起双向Stream），它用于传输HTTP请求与响应。单向Stream有很多用途，所以它在数据前又多出一个Stream Type字段：</p>\n<p><img src=\"https://img.upuphub.com/202106/2021032422420216165969221616596922060c7PK5i.png\" alt=\"StreamId\"></p>\n<p>Stream Type有以下取值：</p>\n<ul>\n<li>0x00：控制Stream，传递各类Stream控制消息；</li>\n<li>0x01：服务器推送消息；</li>\n<li>0x02：用于编码QPACK动态表，比如面对不属于静态表的HTTP请求头部，客户端可以通过这个Stream发送动态表编码；</li>\n<li>0x03：用于通知编码端QPACK动态表的更新结果。</li>\n</ul>\n<p>由于HTTP3的STREAM之间是乱序传输的，因此，若先发送的编码Stream后到达，双向Stream中的QPACK头部就无法解码，此时传输HTTP消息的双向Stream就会进入Block阻塞状态（两端可以通过控制帧定义阻塞Stream的处理方式）。</p>\n<h1 id=\"小节\"><a href=\"#小节\" class=\"headerlink\" title=\"小节\"></a>小节</h1><p>最后对本文内容做个小结。</p>\n<p>基于四元组定义连接并不适用于下一代IoT网络，HTTP3创造出Connection ID概念实现了连接迁移，通过融合传输层、表示层，既缩短了握手时长，也加密了传输层中的绝大部分字段，提升了网络安全性。</p>\n<p>HTTP3在Packet层保障了连接的可靠性，在QUIC Frame层实现了有序字节流，在HTTP3 Frame层实现了HTTP语义，这彻底解开了队头阻塞问题，真正实现了应用层的多路复用。</p>\n<p>QPACK使用独立的单向Stream分别传输动态表编码、解码信息，这样乱序、并发传输HTTP消息的Stream既不会出现队头阻塞，也能基于时序性大幅压缩HTTP Header的体积。</p>\n<h1 id=\"文章来源和引用说明\"><a href=\"#文章来源和引用说明\" class=\"headerlink\" title=\"文章来源和引用说明\"></a>文章来源和引用说明</h1><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><strong>原文作者：</strong> 陶辉<br><strong>原文链接：</strong> <a href=\"https://www.taohui.tech/2021/02/04/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE/%E6%B7%B1%E5%85%A5%E5%89%96%E6%9E%90HTTP3%E5%8D%8F%E8%AE%AE/\">https://www.taohui.tech/2021/02/04/网络协议/深入剖析HTTP3协议/</a></p></blockquote>\n","feature":true,"text":" 原文来自陶辉老师的《深入剖析HTTP3协议》,这里做一些转载和自己的记录,免得忘了 HTTP3协议的深入剖析自2017年起HTTP3协议已发布了34个Draft，推出在即，Chrome、Nginx等软件都在跟进实现最新的草案。本文将介绍HTTP3协议规范、应用场景及实现原理。 ...","link":"","photos":[],"count_time":{"symbolsCount":"7.4k","symbolsTime":"7 mins."},"categories":[{"name":"网络协议","slug":"网络协议","count":1,"path":"api/categories/网络协议.json"}],"tags":[{"name":"网络协议","slug":"网络协议","count":1,"path":"api/tags/网络协议.json"},{"name":"HTTP协议","slug":"HTTP协议","count":1,"path":"api/tags/HTTP协议.json"},{"name":"应用层","slug":"应用层","count":1,"path":"api/tags/应用层.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#HTTP3%E5%8D%8F%E8%AE%AE%E7%9A%84%E6%B7%B1%E5%85%A5%E5%89%96%E6%9E%90\"><span class=\"toc-text\">HTTP3协议的深入剖析</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#HTTP3%E5%8D%8F%E8%AE%AE%E5%88%B0%E5%BA%95%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F\"><span class=\"toc-text\">HTTP3协议到底是什么？</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E8%BF%9E%E6%8E%A5%E8%BF%81%E7%A7%BB%E5%8A%9F%E8%83%BD%E7%9A%84%E5%AE%9E%E7%8E%B0\"><span class=\"toc-text\">连接迁移功能的实现</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Stream%E5%A4%9A%E8%B7%AF%E5%A4%8D%E7%94%A8%E6%97%B6%E7%9A%84%E9%98%9F%E5%A4%B4%E9%98%BB%E5%A1%9E%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3\"><span class=\"toc-text\">Stream多路复用时的队头阻塞问题解决</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#QPACK%E7%BC%96%E7%A0%81%E5%AF%B9%E5%AF%B9%E5%A4%B4%E9%98%BB%E5%A1%9E%E9%98%9F%E5%88%97%E9%97%AE%E9%A2%98%E7%9A%84%E8%A7%A3%E5%86%B3\"><span class=\"toc-text\">QPACK编码对对头阻塞队列问题的解决</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%B0%8F%E8%8A%82\"><span class=\"toc-text\">小节</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%96%87%E7%AB%A0%E6%9D%A5%E6%BA%90%E5%92%8C%E5%BC%95%E7%94%A8%E8%AF%B4%E6%98%8E\"><span class=\"toc-text\">文章来源和引用说明</span></a></li></ol>","author":{"name":"王小妖","slug":"blog-author","avatar":"http://img.upuphub.com/jW5tou.jpg","link":"/","description":"【啾啾】: 小妖养的小猫猫 </br> 【Lily】: 小妖的大哥</br>【小妖】: 搞后端的技术菜鸟 </br></br>做点记录,省的以后忘了","socials":{"github":"https://github.com/iWzl","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"容器技术实现基础和原理","uid":"fe1f8fc0d1387355bca72fa308af9e3c","slug":"容器化应用/容器技术实现基础和原理","date":"2021-03-31T01:49:48.000Z","updated":"2021-06-22T04:54:13.238Z","comments":true,"path":"api/articles/容器化应用/容器技术实现基础和原理.json","keywords":null,"cover":"https://img.upuphub.com/t6Whmk.jpg","text":"容器是 Paas（ Platform-as-a-Service，平台即服务）的一种体现。将所需软件整合成一个应用，一个服务。 通俗的讲：容器是一种沙盒技术。把应用整体封装起来，应用与应用之间，在各自的边界内运行，不会相互干扰；并且封装起来的应用能够很容易的完成打包和分发。 实现原...","link":"","photos":[],"count_time":{"symbolsCount":223,"symbolsTime":"1 mins."},"categories":[{"name":"k8s","slug":"k8s","count":1,"path":"api/categories/k8s.json"}],"tags":[{"name":"docker","slug":"docker","count":1,"path":"api/tags/docker.json"},{"name":"容器","slug":"容器","count":1,"path":"api/tags/容器.json"},{"name":"liunx","slug":"liunx","count":1,"path":"api/tags/liunx.json"}],"author":{"name":"王小妖","slug":"blog-author","avatar":"http://img.upuphub.com/jW5tou.jpg","link":"/","description":"【啾啾】: 小妖养的小猫猫 </br> 【Lily】: 小妖的大哥</br>【小妖】: 搞后端的技术菜鸟 </br></br>做点记录,省的以后忘了","socials":{"github":"https://github.com/iWzl","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true},"next_post":{"title":"支持亿级消息的IM系统模块设计","uid":"620c4776a0cfecee5672c023c9db244a","slug":"及时通讯/支持亿级用户的IM系统模块设计","date":"2021-03-23T02:04:23.000Z","updated":"2021-06-22T04:53:16.839Z","comments":true,"path":"api/articles/及时通讯/支持亿级用户的IM系统模块设计.json","keywords":null,"cover":"https://img.upuphub.com/m68Bca.jpg","text":"支持亿级用户的IM系统模块设计现代实现的及时通讯系统一般由长连接和短连接配合使用进行实现，一般的实现架构即Connector和Service两个部分,分别对应长连接服务和短连接服务，长连接服务主要用于服务端对客户端的推送和新消息到达的通知，短连接服务主要用于客户端对于消息的拉取和...","link":"","photos":[],"count_time":{"symbolsCount":"3.3k","symbolsTime":"3 mins."},"categories":[{"name":"及时通讯","slug":"及时通讯","count":2,"path":"api/categories/及时通讯.json"}],"tags":[{"name":"及时通讯","slug":"及时通讯","count":2,"path":"api/tags/及时通讯.json"},{"name":"系统架构","slug":"系统架构","count":2,"path":"api/tags/系统架构.json"}],"author":{"name":"王小妖","slug":"blog-author","avatar":"http://img.upuphub.com/jW5tou.jpg","link":"/","description":"【啾啾】: 小妖养的小猫猫 </br> 【Lily】: 小妖的大哥</br>【小妖】: 搞后端的技术菜鸟 </br></br>做点记录,省的以后忘了","socials":{"github":"https://github.com/iWzl","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true}}