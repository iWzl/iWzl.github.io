{"title":"支持亿级消息的IM系统模块设计","uid":"620c4776a0cfecee5672c023c9db244a","slug":"及时通讯/支持亿级用户的IM系统模块设计","date":"2021-03-23T02:04:23.000Z","updated":"2021-06-21T14:57:44.312Z","comments":true,"path":"api/articles/及时通讯/支持亿级用户的IM系统模块设计.json","keywords":null,"cover":"http://img.upuphub.com/m68Bca.jpg","content":"<h1 id=\"支持亿级用户的IM系统模块设计\"><a href=\"#支持亿级用户的IM系统模块设计\" class=\"headerlink\" title=\"支持亿级用户的IM系统模块设计\"></a>支持亿级用户的IM系统模块设计</h1><p>现代实现的及时通讯系统一般由长连接和短连接配合使用进行实现，一般的实现架构即Connector和Service两个部分,分别对应长连接服务和短连接服务，<strong>长连接服务主要用于服务端对客户端的推送和新消息到达的通知</strong>，<strong>短连接服务主要用于客户端对于消息的拉取和离线(在线)消息的同步</strong>。当用户数据量增大时,其很容易就会出现以下的缺陷:</p>\n<ul>\n<li><strong>复杂性高</strong>：每个模块服务包含的功能职责增多、模块的边界模糊、 依赖关系不清晰、 代码质量参差不齐、 混乱地堆砌在一起。</li>\n<li><strong>可靠性缺失</strong>： 某个核心服务出现问题，例如死循环、内存溢出等， 可能会导致整个系统不能正常使用。</li>\n<li><strong>拓展成本增大</strong>： 当用户体量增大时,部分服务功能会成为系统瓶颈,当进行服务扩容时,因为部分功能瓶颈的原因，就需要将整个服务进行拓展，带来不需要的成本开销。</li>\n</ul>\n<p>为此就需要对常见IM系统架构进行更加细化的服务拆分,以下就IM服务功能拆分提供参考</p>\n<span id=\"more\"></span>\n\n<h2 id=\"技术指标\"><a href=\"#技术指标\" class=\"headerlink\" title=\"技术指标\"></a>技术指标</h2><ul>\n<li><strong>高可靠</strong>：确保不丢消息；</li>\n<li><strong>高可用</strong>：任意机房或者服务器挂掉，不影响服务；</li>\n<li><strong>实时性</strong>：不管用户在哪里，在线用户消息在1秒内达到（我们实际是75%消息可以做到120ms）；</li>\n<li><strong>有序性</strong>：确保用户消息的有序性，不会出现发送和接受的乱序。</li>\n</ul>\n<h2 id=\"架构拆分\"><a href=\"#架构拆分\" class=\"headerlink\" title=\"架构拆分\"></a>架构拆分</h2><p>当需要满足亿级用户量的IM架构时，需要将IM服务的进行更加精细化的服务拆分</p>\n<ul>\n<li><strong>业务系统</strong>：服务及时通讯的业务逻辑</li>\n<li><strong>信令系统</strong>：负责用户登录，用户在线状态的维护，以及在线用户的下行推送</li>\n<li><strong>推送系统</strong>：负责消息的在线推送和离线推送</li>\n<li><strong>持久化系统</strong>：负责消息和文件的存储和查询</li>\n</ul>\n<img src=\"https://img.hellobyebye.com/doc/2021032318255616164951561616495156116dGPQS7.png\" alt=\"服务架构拆分\"/>\n\n<h3 id=\"业务系统\"><a href=\"#业务系统\" class=\"headerlink\" title=\"业务系统\"></a><strong>业务系统</strong></h3><p>业务系统的详细来说在于<strong>专注处理IM相关的业务逻辑</strong>，主要使用短连接进行实现(HTTP协议)</p>\n<ul>\n<li>消息发送的鉴权和支持(optional)：客户端通过短连接发送消息</li>\n<li>维护用户数据：用户基本信息等</li>\n<li>维护好友关系：好友请求、好友列表、好友信息等</li>\n<li>维护群组信息：群创建、解散、成员管理等</li>\n<li>提供数据：在线消息(optional)、离线拉取、历史记录同步</li>\n<li>其它逻辑：比如通过存储和推送系统，存储消息和发送通知</li>\n</ul>\n<p>其功能和实际的架构可以根据具体的业务量和自身的系统架构进行更加细化的服务细分</p>\n<h3 id=\"信令系统\"><a href=\"#信令系统\" class=\"headerlink\" title=\"信令系统\"></a><strong>信令系统</strong></h3><p>对于IM系统来说，是最主要和最核心的需求和职责，主要维护服务端与客户端的长连接(socket)，其主要职责包含以下3个部分</p>\n<h4 id=\"维护用户在线状态\"><a href=\"#维护用户在线状态\" class=\"headerlink\" title=\"维护用户在线状态\"></a><strong>维护用户在线状态</strong></h4><p>当用户体量大时，需要建立大量的Socket连接和用户接入，为此单台机器是不能满足业务需求的，其落地和必然是集群化的服务，多台服务未用户提供连接服务。当用户A需要给用户B发送消息时,是需要知道用户B当前连接上了那个服务器上，然后通过该台服务器上的Socket连接向用户发送下行通知信息。</p>\n<h4 id=\"下行通知数据下发\"><a href=\"#下行通知数据下发\" class=\"headerlink\" title=\"下行通知数据下发\"></a><strong>下行通知数据下发</strong></h4><p>与维护用户在线状态的职责相关，当用户在线的时，如果有其它用户给他发消息，就需要走在线的系统推送，直接将新消息告知到客户端，而不是走离线推送信息。</p>\n<h4 id=\"业务协议内容的分发\"><a href=\"#业务协议内容的分发\" class=\"headerlink\" title=\"业务协议内容的分发\"></a><strong>业务协议内容的分发</strong></h4><p>信令服务不只可以处理IM请求，也可以处理其它类型的业务请求。为了处理不同的业务，就需要有分发能力。一般来说会使用Protobuf定义下发的业务协议，其中可能会包括SVID(Service Id)或是CMD(Commond)字段来标识消息数据类型，用户通过该标识能表明当前业务包的功能(eg:心跳和连接授权、QoS、消息到达、用户特权变更等)并交由业务服务进行处理。</p>\n<p>这样不管用户有多少的业务或是多少的实现表达，客户端与服务器端仅需要维护一个Socket连接。</p>\n<h4 id=\"信令服务的服务拆分\"><a href=\"#信令服务的服务拆分\" class=\"headerlink\" title=\"信令服务的服务拆分\"></a><strong>信令服务的服务拆分</strong></h4><p>信令系统为了实现以上这3个职责，同时要确保我们服务可平行扩展的能力和稳定性，在实际的技术实现上，我们实际上把信令服务分拆为3个服务模块。</p>\n<p><strong>- 连接授权和维护(Login服务)</strong></p>\n<ul>\n<li><em>主要负责维护用户长链接：</em></li>\n</ul>\n<p>客户端与服务器之间长连接的维护、长连接的连接认证、连接的心跳。用户完成业务模块的登陆操作后，会持有登陆完成后授权给用户Token或者相关凭证、Login服务会接受客户端的连接并对用户心跳包持有的Token进行验证、如果成功就将认证结果发送到Online服务，当授权验证不通过时,直接关闭该次连接。</p>\n<p>Login对并发要求比较高，一般要支持TCP+UDP+Websocket几种方式，单服务可以做到10-250万之间。从服务稳定性角度触发，建议是控制VM的CPU/内存，单服务器以20-50万为合适。</p>\n<p>Login服务器本身没有状态，任何一个Login服务断掉，客户端检测到以后重连另一个Login服务器并发送心跳包，对整体服务可靠性基本没有影响。</p>\n<p><strong>- 在线信息的维护和同步(Online服务)</strong></p>\n<ul>\n<li><em>主要负责维护用户的在线信息:</em></li>\n</ul>\n<p>当用户掉线或者根本不在线，Online服务里用户相关信息就是空</p>\n<p>当用户在线时，Online就能找到用户登录在哪个集群，哪个Login服务器上</p>\n<p>多个Login服务器会连接到Online，定期同步用户登录和离线信息，把用户状态信息存储在共有的存储服务中(Redis集群)。因此也是无状态的，任何一个Online服务挂掉，不影响整体服务能力。当集群规模不大，用户规模也不大时，Online服务也可以收到Login服务里去。</p>\n<p>当规模比较大，建议分拆出来，一方面简化Login的逻辑复杂度，同时避免写共有的存储服务的慢操作，在Login服务里。因为Login要同时处理50万以上的并发链接，不适合在循环里嵌入慢操作。</p>\n<p><strong>- 协议的解析和业务的路由(Route服务)</strong></p>\n<ul>\n<li><em>主要负责信令系统跟其它子系统的交互：</em></li>\n</ul>\n<p>Route下接Login服务，可以接受用户业务信息（IM），也可以往用户推送下行消息。多个后端业务系统可以接入到Route，按照服务类型（SVID、CMD）注册。</p>\n<p>IM服务可以接入到Route, 注册SVID_IM或CMD_IM。这样Login接收到SVID=SVID_IM、或者CMD_IM的消息，转发给Route，Route就可以根据SVID转发给IM相关的服务。</p>\n<p>Route只做转发，不处理具体的业务逻辑，因此也是无状态的。一个信令集群可以有多个Route服务，任何服务挂了不影响整体服务能力。</p>\n<h3 id=\"推送系统\"><a href=\"#推送系统\" class=\"headerlink\" title=\"推送系统\"></a>推送系统</h3><p>接收服务端给用户发送下行消息的请求后，通过信令服务查询用户是否在线，如果在线走信令服务器进行在线推送，如果不在线走离线推送。</p>\n<p>推送服务可能出现大规模并发蜂拥，可能会触发亿级的TPS。为此可以用Kafka或其他消息中间件做削峰。具体的服务实现模块可主要由以下4个部分组成:</p>\n<ul>\n<li>PushProxy：接受服务端给用户发送的下行消息，写入消息中间件</li>\n<li>消息中间件(Kafka)：缓存推送服务消息并做削峰，并完成消息任务的推送</li>\n<li>PushServer：监听来自消息中间件的请求，消费消息，完成用的在线、离线状态的判断，调用PushWorker</li>\n<li>PushWorker：真正推送给信令或者APNS、Firebase、或其他推送平台</li>\n</ul>\n<p>因此除了中间件以外的每个服务都是无状态的、因此也可以实现平行拓展和容错，任何服务挂点都不会对整体服务可用性产生影响。</p>\n<h3 id=\"持久化系统\"><a href=\"#持久化系统\" class=\"headerlink\" title=\"持久化系统\"></a>持久化系统</h3><p>当用户数据产生后，必然是需要伴随消息的存储和持久化的，因此持久化系统主要负责消息的存储和查询，已实现离线消息的拉取、漫游等的相关附属功能。因为消息量巨大，对存储服务的并发能力和存储量要求巨大。为了平衡性能、空间和成本，存储服务按数据的热度进行了分级和区别对待。</p>\n<ul>\n<li>短期消息(7天)：存储在Redis里</li>\n<li>近期消息(1-3个月)：存储在Mysql里，以备用户实时查询</li>\n<li>历史信息：存储在HBase里，作为历史数据慢查询</li>\n</ul>\n<p>为了应对超大群的大量消息处理，存储服务在实际的技术实现上，也做了比较细的分拆</p>\n<p><strong>具体的业务划分</strong></p>\n<ul>\n<li>MsgProxy：负责接受业务系统的存储请求，写入消息中间件</li>\n<li> MsgWriter：从消息中间件获取写请求，按需写入Redis和Mysql</li>\n<li>MsgReader：接受用户的消息查询请求，从Redis，Mysql或者HBase读数据</li>\n</ul>\n<p>部署上可能是3-4个MsgProxy，后端可以对应15个左右的MsgWriter。MsgWriter是比较慢的，需要同时操作多个数据库，还要保证操作的原子性。</p>\n","feature":true,"text":"支持亿级用户的IM系统模块设计现代实现的及时通讯系统一般由长连接和短连接配合使用进行实现，一般的实现架构即Connector和Service两个部分,分别对应长连接服务和短连接服务，长连接服务主要用于服务端对客户端的推送和新消息到达的通知，短连接服务主要用于客户端对于消息的拉取和...","link":"","photos":[],"count_time":{"symbolsCount":"3.3k","symbolsTime":"3 mins."},"categories":[{"name":"及时通讯","slug":"及时通讯","count":2,"path":"api/categories/及时通讯.json"}],"tags":[{"name":"及时通讯","slug":"及时通讯","count":2,"path":"api/tags/及时通讯.json"},{"name":"系统架构","slug":"系统架构","count":2,"path":"api/tags/系统架构.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%94%AF%E6%8C%81%E4%BA%BF%E7%BA%A7%E7%94%A8%E6%88%B7%E7%9A%84IM%E7%B3%BB%E7%BB%9F%E6%A8%A1%E5%9D%97%E8%AE%BE%E8%AE%A1\"><span class=\"toc-text\">支持亿级用户的IM系统模块设计</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%8A%80%E6%9C%AF%E6%8C%87%E6%A0%87\"><span class=\"toc-text\">技术指标</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%9E%B6%E6%9E%84%E6%8B%86%E5%88%86\"><span class=\"toc-text\">架构拆分</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%B8%9A%E5%8A%A1%E7%B3%BB%E7%BB%9F\"><span class=\"toc-text\">业务系统</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BF%A1%E4%BB%A4%E7%B3%BB%E7%BB%9F\"><span class=\"toc-text\">信令系统</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%BB%B4%E6%8A%A4%E7%94%A8%E6%88%B7%E5%9C%A8%E7%BA%BF%E7%8A%B6%E6%80%81\"><span class=\"toc-text\">维护用户在线状态</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%B8%8B%E8%A1%8C%E9%80%9A%E7%9F%A5%E6%95%B0%E6%8D%AE%E4%B8%8B%E5%8F%91\"><span class=\"toc-text\">下行通知数据下发</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%B8%9A%E5%8A%A1%E5%8D%8F%E8%AE%AE%E5%86%85%E5%AE%B9%E7%9A%84%E5%88%86%E5%8F%91\"><span class=\"toc-text\">业务协议内容的分发</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%BF%A1%E4%BB%A4%E6%9C%8D%E5%8A%A1%E7%9A%84%E6%9C%8D%E5%8A%A1%E6%8B%86%E5%88%86\"><span class=\"toc-text\">信令服务的服务拆分</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%8E%A8%E9%80%81%E7%B3%BB%E7%BB%9F\"><span class=\"toc-text\">推送系统</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%8C%81%E4%B9%85%E5%8C%96%E7%B3%BB%E7%BB%9F\"><span class=\"toc-text\">持久化系统</span></a></li></ol></li></ol></li></ol>","author":{"name":"王小妖","slug":"blog-author","avatar":"http://img.upuphub.com/jW5tou.jpg","link":"/","description":"【啾啾】: 小妖养的小猫猫 </br> 【Lily】: 小妖的大哥</br>【小妖】: 搞后端的技术菜鸟 </br></br>做点记录,省的以后忘了","socials":{"github":"https://github.com/iWzl","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"HTTP3协议的深入剖析","uid":"58cd1de81cc6a83719721cae20d0ce2c","slug":"网络协议/应用层协议/HTTP3协议的深入剖析","date":"2021-03-24T03:55:05.000Z","updated":"2021-06-21T14:00:18.510Z","comments":true,"path":"api/articles/网络协议/应用层协议/HTTP3协议的深入剖析.json","keywords":null,"cover":"http://img.upuphub.com/CH1K51.jpg","text":"HTTP3协议的深入剖析自2017年起HTTP3协议已发布了34个Draft，推出在即，Chrome、Nginx等软件都在跟进实现最新的草案。本文将介绍HTTP3协议规范、应用场景及实现原理。 2015年HTTP2协议正式推出后，已经有接近一半的互联网站点在使用它： HTTP2协...","link":"","photos":[],"count_time":{"symbolsCount":"7.4k","symbolsTime":"7 mins."},"categories":[{"name":"网络协议","slug":"网络协议","count":1,"path":"api/categories/网络协议.json"}],"tags":[{"name":"网络协议","slug":"网络协议","count":1,"path":"api/tags/网络协议.json"},{"name":"HTTP协议","slug":"HTTP协议","count":1,"path":"api/tags/HTTP协议.json"},{"name":"应用层","slug":"应用层","count":1,"path":"api/tags/应用层.json"}],"author":{"name":"王小妖","slug":"blog-author","avatar":"http://img.upuphub.com/jW5tou.jpg","link":"/","description":"【啾啾】: 小妖养的小猫猫 </br> 【Lily】: 小妖的大哥</br>【小妖】: 搞后端的技术菜鸟 </br></br>做点记录,省的以后忘了","socials":{"github":"https://github.com/iWzl","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true},"next_post":{"title":"IM系统的可靠性保障方案设计","uid":"9f19cde10b918c008ebff1af093bc9fb","slug":"及时通讯/IM系统的可靠性保障方案设计","date":"2021-03-23T01:06:55.000Z","updated":"2021-06-21T14:59:30.546Z","comments":true,"path":"api/articles/及时通讯/IM系统的可靠性保障方案设计.json","keywords":null,"cover":"http://img.upuphub.com/mEMbSs.jpg","text":" 6703f070ab98bb6294c4cf62ba6bef8a8f5504636ece03b0f3bc331c647c2adb 输入密码，查看文章 ","link":"","photos":[],"count_time":{"symbolsCount":124,"symbolsTime":"1 mins."},"categories":[{"name":"及时通讯","slug":"及时通讯","count":2,"path":"api/categories/及时通讯.json"}],"tags":[{"name":"及时通讯","slug":"及时通讯","count":2,"path":"api/tags/及时通讯.json"},{"name":"系统架构","slug":"系统架构","count":2,"path":"api/tags/系统架构.json"}],"author":{"name":"王小妖","slug":"blog-author","avatar":"http://img.upuphub.com/jW5tou.jpg","link":"/","description":"【啾啾】: 小妖养的小猫猫 </br> 【Lily】: 小妖的大哥</br>【小妖】: 搞后端的技术菜鸟 </br></br>做点记录,省的以后忘了","socials":{"github":"https://github.com/iWzl","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}